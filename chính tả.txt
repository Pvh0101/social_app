MỤC LỤC
MỤC LỤC	I
DANH MỤC CÁC HÌNH VẼ	V
DANH MỤC CÁC BẢNG BIỂU	VIII
DANH MỤC CÁC TỪ VIẾT TẮT	IX
TÓM TẮT NỘI DUNG ĐỒ ÁN TỐT NGHIỆP	10
LỜI CẢM ƠN	11
MỞ ĐẦU	12
CHƯƠNG 1 CƠ SỞ LÝ THUYẾT	16
1.1 Các khái niệm liên quan đến đề tài	16
1.2 Lý thuyết nền tảng cho việc phát triển hệ thống	17
1.2.1 Kiến trúc Feature-First	17
1.2.2 Quản lý trạng thái với Riverpod	18
1.3 Công nghệ và ngôn ngữ lập trình sử dụng	19
1.3.1 Ngôn ngữ lập trình Dart	19
1.3.2 . Nền tảng Firebase	21
1.3.3 Visual Studio Code	23
1.4 Các framework và thư viện được sử dụng	24
1.4.1 Flutter (Crossplatform UI framework)	24
CHƯƠNG 2 PHÂN TÍCH THIẾT KẾ HỆ THỐNG	26
2.1 Khảo sát hệ thống	26
2.1.1 Phân tích vấn đề hiện tại	26
2.2 Yêu cầu chức năng và Yêu cầu phi chức năng	28
2.2.1 Yêu cầu chức năng	28
2.2.2 Yêu cầu phi chức năng	29
2.3 Đặc tả chức năng	30
2.3.1 Đặc tả chức năng – Đăng ký	30
2.3.2 Đặc tả chức năng - Đăng nhập.	31
2.3.3 Đặc tả chức năng - Nhắn tin	32
2.3.4 Đặc tả chức năng – Xem thông báo	33
2.3.5 Đặc tả chức năng –  Quản lý thông tin hồ sơ cá nhân	34
2.3.6 Đặc tả chức năng – Thêm bài viết	35
2.3.7 Đặc tả chức năng – Chỉnh sửa bài viết	36
2.3.8 Đặc tả chức năng – Xóa bài viết	37
2.3.9 Đặc tả chức năng – Kết bạn	37
2.3.10 Đặc tả chức năng – Đồng ý kết bạn	38
2.3.11 Đặc tả chức năng – Xóa bạn bè	39
2.3.12 Đặc tả chức năng – Tạo nhóm chat	40
2.3.13 Đặc tả chức năng – Sửa nhóm chat	41
2.3.14 Đặc tả chức năng – Xóa nhóm chat	42
2.4 Biểu đồ Ca sử dụng (Use Case Diagram).	44
2.4.1 Biểu đồ Use Case – Tổng quát	44
2.4.2 Biểu đồ Use Case – Chức năng Đăng ký	45
2.4.3 Biểu đồ Use Case – Chức năng Đăng nhập	45
2.4.4 Biểu đồ Use Case – Chức năng Nhắn tin	45
2.4.5 Biểu đồ Use Case – Chức năng Xem thông báo	46
2.4.6 Biểu đồ Use Case – Chức năng Quản lý thông tin cá nhân	46
2.4.7 Biểu đồ Use Case – Chức năng Thêm bài viết	47
2.4.8 Biểu đồ Use Case – Chức năng Chỉnh sửa bài viết	47
2.4.9 Biểu đồ Use Case – Chức năng Xóa bài viết	47
2.4.10 Biểu đồ Use Case – Chức năng Kết bạn	48
2.4.11 Biểu đồ Use Case – Chức năng Đồng ý kết bạn	48
2.4.12 Biểu đồ Use Case – Chức năng Xóa bạn bè	48
2.4.13 Biểu đồ Use Case – Chức năng Tạo nhóm chat	49
2.4.14 Biểu đồ Use Case – Chức năng Sửa nhóm chat	50
2.4.15 Biểu đồ Use Case – Chức năng Xóa nhóm chat	50
2.5 Sơ đồ tuần tự (Sequence Diagram).	51
2.5.1 Biểu đồ Tuần tự – Chức năng Đăng ký	51
2.5.2 Biểu đồ Tuần tự – Chức năng Đăng nhập	52
2.5.3 Biểu đồ Tuần tự – Chức năng Nhắn tin	53
2.5.4 Biểu đồ tuần tự – Chức năng Xem thông báo	54
2.5.5 Biểu đồ tuần tự – Chức năng Quản lý thông tin cá nhân	55
2.5.6 Biểu đồ tuần tự – Chức năng Thêm bài viết	56
2.5.7 Biểu đồ tuần tự – Chức năng Chỉnh sửa bài viết	57
2.5.8 Biểu đồ tuần tự – Chức năng Xóa bài viết	58
2.5.9 Biểu đồ tuần tự – Chức năng Kết bạn	59
2.5.10 Biểu đồ tuần tự – Chức năng Đồng ý kết bạn	60
2.5.11 Biểu đồ tuần tự – Chức năng Xóa bạn bè	61
2.5.12 Biểu đồ tuần tự – Chức năng Tạo nhóm chat	62
2.5.13 Biểu đồ tuần tự – Chức năng Sửa nhóm chat	63
2.5.14 Biểu đồ tuần tự – Chức năng Xóa nhóm chat	64
2.6 Biểu đồ hoạt động (Activity Diagram)	65
2.6.1 Biểu đồ Hoạt động – Chức năng Đăng ký	65
2.6.2 Biểu đồ Hoạt động – Chức năng Đăng nhập	66
2.6.3 Biểu đồ Hoạt động – Chức năng Nhắn tin	67
2.6.4 Biểu đồ Hoạt động – Chức năng Xem thông báo	68
2.6.5 Biểu đồ Hoạt động – Chức năng Quản lý thông tin cá nhân	68
2.6.6 Biểu đồ Hoạt động – Chức năng Thêm bài viết	69
2.6.7 Biểu đồ Hoạt động – Chức năng Chỉnh sửa bài viết	70
2.6.8 Biểu đồ Hoạt động – Chức năng Xóa bài viết	71
2.6.9 Biểu đồ Hoạt động – Chức năng Kết bạn	72
2.6.10 Biểu đồ Hoạt động – Chức năng Đồng ý kết bạn	73
2.6.11 Biểu đồ Hoạt động – Chức năng Xóa bạn bè	74
2.6.12 Biểu đồ Hoạt động – Chức năng Tạo nhóm chat	75
2.6.13 Biểu đồ Hoạt động – Chức năng Sửa nhóm chat	76
2.6.14 Biểu đồ Hoạt động – Chức năng Xóa nhóm chat	77
2.7 Thiết kế cơ sở dữ liệu	77
2.7.1 Bảng Cơ Sở Dữ Liệu - Người Dùng	77
2.7.2 Bảng Cơ Sở Dữ Liệu - Bạn bè	78
2.7.3 Bảng Cơ Sở Dữ Liệu  Like	79
2.7.4 Bảng Cơ Sở Dữ Liệu - Thông báo	79
2.7.5 Bảng Cơ Sở Dữ Liệu - Bình luận	80
2.7.6 Bảng Cơ Sở Dữ Liệu -  Bài viết	80
2.7.7 Bảng Cơ Sở Dữ Liệu -  Tin nhắn	81
2.7.8 Bảng Cơ Sở Dữ Liệu – Cuộc trò truyện	82
CHƯƠNG 3 : KẾT QUẢ CÀI ĐẶT, THỬ NGHIỆM HOẶC KẾT QUẢ NGHIÊN CỨU	84
3.1 Mô tả môi trường phát triển và triển khai	84
3.2 Cài đặt và cấu hình hệ thống	84
3.3 Mô tả chi tiết các chức năng đã thực hiện	85
3.4 Giao diện và luồng hoạt động của hệ thống	87
3.4.1 Xác thực và Quản lý Người dùng	87
3.4.2 Trang chủ và Bài viết	91
3.4.3 Đăng bài và Quản lý Nội dung	94
3.4.4 Hệ thống Nhắn tin	97
3.4.5 Chức năng Quản lý bạn bè	100
3.4.6 Hệ thống Thông báo	105
3.4.7 Hồ sơ Người dùng	106
3.4.8 Cài đặt Ứng dụng	109
3.4.9 Luồng Dữ liệu và Đồng bộ hóa	110
3.5 Đánh giá hiệu năng hệ thống	111
3.6 So sánh kết quả với mục tiêu ban đầu	112
Kết luận và hướng phát triển	114
1.	Kết quả đạt được	114
2.	Hạn chế	114
3.	Hướng khắc phục	114
4.	Hướng mở rộng	114
TÀI LIỆU THAM KHẢO	1

 
DANH MỤC CÁC HÌNH VẼ
Hình 1 1Ví dụ về mô hình Feature-First	17
Hình 2 1 Biểu đồ Usecase – Tổng quát	44
Hình 2 2 Biểu đồ Use Case – Chức năng Đăng ký	45
Hình 2 3 Biểu đồ Use Case – Chức năng Đăng nhập	45
Hình 2 4 Biểu đồ Use Case – Chức năng Nhắn tin	45
Hình 2 5 Biểu đồ Use Case – Chức năng Xem thông báo	46
Hình 2 6 Biểu đồ Use Case – Chức năng Quản lý thông tin cá nhân	46
Hình 2 7 Biểu đồ Use Case – Chức năng Thêm bài viết	47
Hình 2 8 Biểu đồ Use Case – Chức năng Chỉnh sửa bài viết	47
Hình 2 9 Biểu đồ Use Case – Chức năng Xóa bài viết	47
Hình 2 10 Biểu đồ Use Case – Chức năng Kết bạn\	48
Hình 2 11 Biểu đồ Use Case – Chức năng Đồng ý kết bạn	48
Hình 2 12 Biểu đồ Use Case – Chức năng Xóa bạn bè	48
Hình 2 13 Biểu đồ Use Case – Chức năng Tạo nhóm chat	49
Hình 2 14 Biểu đồ Use Case – Chức năng Sửa nhóm chat	50
Hình 2 15 Biểu đồ Use Case – Chức năng Xóa nhóm chat	50
Hình 2 16 Biểu đồ tuần tự – Chức năng Đăng ký	51
Hình 2 17 Biểu đồ tuần tự – Chức năng Đăng nhập	52
Hình 2 18 Biểu đồ tuần tự – Chức năng Nhắn tin	53
Hình 2 19 Biểu đồ tuần tự – Chức năng Xem thông báo	54
Hình 2 20 Biểu đồ tuần tự – Chức năng Quản lý thông tin cá nhân	55
Hình 2 21 Biểu đồ tuần tự – Chức năng Thêm bài viết	56
Hình 2 22 Biểu đồ tuần tự – Chức năng Chỉnh sửa bài viết	57
Hình 2 23 Biểu đồ tuần tự – Chức năng Xóa bài viết	58
Hình 2 24 Biểu đồ tuần tự – Chức năng Kết bạn	59
Hình 2 25 Biểu đồ tuần tự – Chức năng Đồng ý kết bạn	60
Hình 2 26 Biểu đồ tuần tự – Chức năng Xóa bạn bè	61
Hình 2 27 Biểu đồ tuần tự – Chức năng Tạo nhóm chat	62
Hình 2 28 Biểu đồ tuần tự – Chức năng Sửa nhóm chat	63
Hình 2 29 Biểu đồ hoạt động – Chức năng Đăng ký	65
Hình 2 30 Biểu đồ Hoạt động – Chức năng Đăng nhập	66
Hình 2 31 Biểu đồ Hoạt động – Chức năng Nhắn tin	67
Hình 2 32 Biểu đồ Hoạt động – Chức năng Xem thông báo	68
Hình 2 33 Biểu đồ Hoạt động – Chức năng Quản lý thông tin cá nhân	68
Hình 2 34 Biểu đồ Hoạt động – Chức năng Thêm bài viết	69
Hình 2 35 Biểu đồ Hoạt động – Chức năng Chỉnh sửa bài viết	70
Hình 2 36 Biểu đồ Hoạt động – Chức năng Xóa bài viết	71
Hình 2 37 Biểu đồ Hoạt động – Chức năng Kết bạn	72
Hình 2 38 Biểu đồ Hoạt động – Chức năng Đồng ý kết bạn	73
Hình 2 39 Biểu đồ Hoạt động – Chức năng Xóa bạn bè	74
Hình 2 40 Biểu đồ Hoạt động – Chức năng Tạo nhóm chat	75
Hình 2 41 Biểu đồ Hoạt động – Chức năng Sửa nhóm chat	76
Hình 2 42 Biểu đồ Hoạt động – Chức năng Xóa nhóm chat	77
Hình 3 1 Giao diện màn hình Đăng ký tài khoản	87
Hình 3 2Giao diện màn hình xác nhận Email	88
Hình 3 3Giao diện màn hình Nhập thông tin cá nhân	89
Hình 3 4Giao diện màn hình Đăng nhập	90
Hình 3 5Giao diện màn hình Bài viết	91
Hình 3 6Giao diện màn hình Video	92
Hình 3 7Giao diện màn Hình tương tác với bài viết (hình ảnh)	93
Hình 3 8Giao diện màn hình tạo bài viết	94
Hình 3 9Giao diện màn hình chỉnh sửa bài viết	95
Hình 3 10Giao diện màn hình Danh sách cuộc trò truyện	97
Hình 3 11Giao diện màn hình Tạo nhóm chat	98
Hình 3 12Giao diện màn hình Gửi và nhận tin nhắn	99
Hình 3 13Giao diện màn hình Tìm kiếm người dùng	101
Hình 3 14Giao diện màn hình Gửi lời mời kết bạn	102
Hình 3 15Giao diện màn hình Quản lý lời mời kết bạn	103
Hình 3 16Giao diện màn hình  Quản lý danh sách bạn bè	104
Hình 3 17Giao diện màn hình thông báo trong ứng dụng	105
Hình 3 18Giao diện màn hình xem hồ sơ cá nhân	106
Hình 3 19Giao diện màn hình Xem hồ sơ người dùng khác	107
Hình 3 20Giao diện màn hình Chỉnh sửa hồ sơ	108
Hình 3 21Giao diện màn hình Cài đặt ngôn ngữ	109
Hình 3 22Giao diện màn hình Cài đặt giao diện	110

 
DANH MỤC CÁC BẢNG BIỂU

Bảng 2 1 Đặc tả chức năng – Đăng ký	31
Bảng 2 2 Đặc tả chức năng – Đăng nhập	32
Bảng 2 3 Đặc tả chức năng – Nhắn tin	33
Bảng 2 4 Đặc tả chức năng – Xem thông báo	34
Bảng 2 5 Đặc tả chức năng – Quản lý thông tin cá nhân	35
Bảng 2 6 Đặc tả chức năng – Thêm bài viết	36
Bảng 2 7 Đặc tả chức năng – Chỉnh sửa bài viết	37
Bảng 2 8 Đặc tả chức năng – Xóa bài viết	37
Bảng 2 10 Đặc tả chức năng – Kết bạn	38
Bảng 2 11 Đặc tả chức năng – Đồng ý kết bạn	39
Bảng 2 12 Đặc tả chức năng – Xóa bạn bè	40
Bảng 2 13 Đặc tả chức năng – Tạo nhóm chat	41
Bảng 2 14 Đặc tả chức năng – Sửa nhóm chat	42
Bảng 2 15 Đặc tả chức năng – Xóa nhóm chat	43
Bảng 2 16 Bảng cơ sở dữ liệu người dùng	78
Bảng 2 17 Bảng cơ sở dữ liệu Quản lý bạn bè	79
Bảng 2 18 Bảng cơ sở dữ liệu Quản lý chức năng Like	79
Bảng 2 19Bảng cơ sở dữ liệu Quản lý thông báo	80
Bảng 2 20 Bảng cơ sở dữ liệu Quản lý bình luận	80
Bảng 2 21Bảng cơ sở dữ liệu Quản lý bài viết	81
Bảng 2 22 Bảng cơ sỏ dữ liệu Quản lý tin nhắn	82
Bảng 2 23 Bảng cơ sở dữ liệu Quản lí cuộc trò truyện	83

 
DANH MỤC CÁC TỪ VIẾT TẮT
STT	Từ viết tắt	Từ tiếng Anh	Từ và nghĩa tiếng Việt
1	CSDL	Database	Cơ sở dữ liệu
2	DB	Database	Cơ sở dữ liệu
3	Comment	Comment	Bình luận
4	Like	Like	Yêu thích
5	Auth	Authentication	Xác minh người dùng
6	VS Code	Visual Studio Code	Phần mềm soạn thảo mã nguồn
 
TÓM TẮT NỘI DUNG ĐỒ ÁN TỐT NGHIỆP
Đề tài nghiên“cứu này tập trung vào việc phát triển một nền tảng kết nối xã hội hiện đại nhằm đáp ứng nhu cầu giao tiếp trực tuyến ngày càng tăng của người dùng. Ứng dụng được thiết kế với kiến trúc mở, cho phép mở rộng quy mô, đảm bảo hiệu suất vận hành tối ưu và tích hợp các biện pháp bảo mật tiên tiến, đồng thời hỗ trợ đa nền tảng để người dùng có thể truy cập từ nhiều thiết bị khác nhau.
Trong quá trình phát triển, chú trọng vào việc tối ưu hóa trải nghiệm người dùng, xây dựng hệ thống quản lý dữ liệu hiệu quả và triển khai các cơ chế bảo vệ thông tin cá nhân. Ứng dụng cung cấp đầy đủ các chức năng thiết yếu như: đăng ký tài khoản, xác thực người dùng, chia sẻ nội dung đa phương tiện, tương tác giữa các thành viên, hệ thống tin nhắn, quản lý danh sách liên hệ và thông báo thời gian thực. Ngoài ra, hệ thống đã được em kiểm thử toàn diện để đánh giá khả năng đáp ứng yêu cầu và xác định các hướng cải tiến trong tương lai.
Kết quả nghiên cứu cho thấy ứng dụng hoạt động ổn định và đáp ứng đầy đủ các yêu cầu kỹ thuật đề ra. Dự án không chỉ cung cấp một giải pháp thực tiễn cho nhu cầu kết nối xã hội mà còn đề xuất khung phát triển có thể mở rộng, bao gồm việc tích hợp các công nghệ mới nổi và cải thiện liên tục trải nghiệm người dùng dựatrên phản hồi thực tế.”

 
LỜI CẢM ƠN
Với lòng biết ơn sâu sắc, em xin gửi lời tri ân chân thành đến Khoa Công nghệ Thông tin, trường Đại học Mỏ-Địa chất đã tạo môi trường học tập thuận lợi và những cơ hội quý báu trong suốt quá trình học tập và nghiên cứu của em.
Đặc“biệt,em xin bày tỏ lòng kính trọng và biết ơn sâu sắc đến thầy Ngô Hùng Long-người thầy đã không quản ngại thời gian và công sức để hướng dẫn, chỉ bảo và truyền đạt kinh nghiệm quý báu cho em trong suốt quá trình thực hiện đồ án. Những nhận xét sắc bén, góc nhìn chuyên sâu và sự kiên nhẫn của thầy đã là nguồn động viên to lớn giúp em vượt qua nhiều trở ngại để hoàn thiện đồ án này.
Em cũng xin gửi lời cảm ơn chân thành đến quý thầy cô trong Khoa đã tận tâm truyền đạt kiến thức, chia sẻ kinh nghiệm và nuôi dưỡng niềm đam mê học tập trong em. Những bài giảng sinh động, những buổi thảo luận bổ ích và những lời khuyên tâm huyết của quý thầy cô sẽ là hành trang vô giá cho em trên con đường sự nghiệp sau này.
Xin gửi lời cảm ơn đến các bạn đồng khóa đã luôn sát cánh, hỗ trợ và động viên em trong những thời khắc khó khăn. Những buổi học nhóm, những cuộc trao đổi học thuật và những giây phút cùng nhau nỗ lực sẽ là những kỷ niệm đáng trân trọng trong hành trình sinh viên của em.
Cuối cùng, em xin bày tỏ lòng biết ơn vô hạn đến gia đình  những người đã luôn âm thầm ủng hộ, động viên và tạo điều kiện tốt nhất để em an tâm theo đuổi con đường học vấn. Tình thương và niềm tin mà gia đình dành cho em chính là nguồn sức mạnh tinh thần quý giá nhất,”giúp em vững bước vượt qua mọi thử thách để đạt được thành quả ngày hôm nay.” 
MỞ ĐẦU
1. Tổng quan và lý do nghiên cứu
Kỷ nguyên số đã mang đến sự phát triển vượt bậc của công nghệ, trong đó mạng xã hội đã trở thành một phần không thể thiếu trong cuộc sống thường nhật của con người. Các nền tảng trực tuyến hiện nay không chỉ đóng vai trò là kênh kết nối cá nhân mà còn là“không gian quan trọng trong lĩnh vực giáo dục, hoạt động thương mại và truyền thông đại chúng. Đặc biệt, với sự phổ cập của thiết bị di động thông minh, việc phát triển ứng dụng mạng xã hội trên nền tảng di động đã trở thành xu hướng tất yếu nhằm đáp ứng nhu cầu kết nối nhanh chóng và linh hoạt của người dùng trong thời đại công nghệ số.
Xuất phát từ mong muốn nghiên cứu và ứng dụng kiến thức chuyên ngành vào thực tiễn, em lựa chọn đề tài "Xây dựng ứng dụng mạng xã hội sử dụng Flutter". Đề tài này không chỉ giúp em nâng cao năng lực phát triển ứng dụng thực tế mà còn tạo cơ hội để tìm hiểu và giải quyết các thách thức trong lĩnh vực giao tiếp trực tuyến, đồng thời tối ưu hóa trải nghiệm người dùng. Quá trình nghiên cứu và phát triển đã giúp em hiểu sâu sắc về cách xây dựng một hệ thống kết nối trực tuyến hiệu quả và bảo mật.
Hiện nay, thị trường mạng xã hội toàn cầu đã có nhiều nền tảng nổi tiếng như Facebook, Instagram, Twitter và TikTok với hàng tỷ người dùng. Tuy nhiên, phần lớn các nền tảng này được phát triển bởi các công ty nước ngoài, trong khi thị trường nội địa vẫn còn nhiều tiềm năng chưa được khai thác đúng mức. Mặc dù đã có một số ứng dụng mạng xã hội nội địa như Zalo và Lotus, nhưng vẫn chưa thực sự cạnh tranh được với các nền tảng quốc tế về mặt tính năng và trải nghiệm người dùng. Chính vì vậy, việc nghiên cứu và phát triển một ứng dụng”mạng xã hội mới, có tính thực tiễn cao và phù hợp với nhu cầu đặc thù của người dùng Việt Nam là một hướng đi cần thiết và đầy tiềm năng. 
2. Mục tiêu nghiên cứu
Mục“tiêu chính của đề tài là thiết kế và phát triển một ứng dụng mạng xã hội đa nền tảng di động với giao diện trực quan, tốc độ phản hồi nhanh, và khả năng kết nối liền mạch giữa người dùng. Ứng dụng được xây dựng với trọng tâm là tạo ra trải nghiệm người dùng tối ưu, đảm bảo tính bảo mật cao, và tích hợp các công nghệ hiện đại phù hợp với xu hướng phát triển của thị trường.”
Mục tiêu cụ thể của đề tài bao gồm: “
•	Phát triển các tính năng cốt lõi như: đăng ký, đăng nhập, tạo bài viết, chia sẻ hình ảnh, video, bình luận, thích (like), chia sẻ nội dung.
•	Xây dựng hệ thống thông báo để cập nhật hoạt động mới.
•	Triển khai chức năng nhắn tin cá nhân và nhóm chat, giúp người dùng kết nối và tương tác dễ dàng.
•	Sử dụng Flutter để phát triển ứng dụng đa nền tảng trên cả Android và iOS.
•	Ứng dụng Firebase Firestore để quản lý dữ liệu thời gian thực, hỗ trợ khả năng mở rộng hệ thống.
•	Áp dụng Clean Architecture để phân tách các tầng dữ liệu, logic và giao diện; giúp ứng dụng dễ bảo trì và phát triển.
•	Tối ưu hóa giao diện người dùng (UI/UX) với thiết kế trực quan, dễ sử dụng và phù hợp với các kích thước màn hình khác nhau.
•	Tăng cường bảo mật thông tin người dùng bằng cách sử dụng Firebase Authentication, mã hóa dữ liệu và các biện pháp bảo mật khác.
Phạm vi nghiên cứu của đề tài được giới hạn trong các lĩnh vực công nghệ sau:
•	Phát triển ứng dụng di động đa nền tảng sử dụng framework Flutter, tận dụng ưu điểm của ngôn ngữ Dart và khả năng xây dựng giao diện linh hoạt.
•	Thiết kế và triển khai cơ sở dữ liệu thời gian thực với Firebase Firestore, bao gồm cấu trúc dữ liệu, quy tắc bảo mật và chiến lược đồng bộ hóa.
•	Nghiên cứu và áp dụng các nguyên tắc thiết kế giao diện người dùng (UI/UX) phù hợp với xu hướng hiện đại và thói quen sử dụng của người dùng Việt Nam.
•	Triển khai các cơ chế bảo mật và xác thực người dùng thông qua Firebase Authentication và các biện pháp mã hóa dữ liệu.
Trong thời gian thực hiện đề tài, nghiên cứu sẽ tập trung vào việc phát triển các tính năng cơ bản của một mạng xã hội, chưa bao gồm các tính năng phức tạp như livestream, trí tuệ nhân tạo phân tích nội dung, hay hệ thống xử lý video streaming. Ứng dụng sẽ được thử nghiệm với một nhóm người dùng có quy mô nhỏ để đánh giá trải nghiệm và thu thập phản hồi trước khi tiến hành mở rộng và phát triển thêm các tính năng nâng cao.”
Nội dung nghiên cứu sẽ tập trung vào các chức năng thiết yếu của một mạng xã hội như đăng ký, đăng nhập, đăng bài, tương tác, nhắn tin và thông báo, chưa bao gồm các tính năng như video streaming thời gian thực, đề xuất nội dung thông minh dựa trên AI, hay tích hợp đa ngôn ngữ. 

3. Phương pháp nghiên cứu
Để đạt được các mục tiêu đề ra, đề tài áp dụng tổng hợp các phương pháp nghiên cứu sau: “

•	Nghiên cứu tài liệu và phân tích công nghệ: Thu thập, tổng hợp và phân tích các tài liệu chuyên môn liên quan đến Flutter, Firebase và các công nghệ phát triển ứng dụng di động hiện đại. Phương pháp này giúp xây dựng nền tảng kiến thức vững chắc, nắm bắt các xu hướng mới nhất và áp dụng các thực tiễn tốt nhất trong phát triển ứng dụng.
•	Khảo sát và phân tích người dùng: Tiến hành khảo sát trực tuyến và phỏng vấn nhóm người dùng mục tiêu để thu thập thông tin về nhu cầu, thói quen sử dụng và mong đợi của họ đối với một ứng dụng mạng xã hội. Kết quả khảo sát được phân tích để xác định các tính năng ưu tiên và thiết kế trải nghiệm người dùng phù hợp.
•	Thiết kế hướng mô hình: Áp dụng phương pháp thiết kế hướng mô hình để xây dựng kiến trúc phần mềm theo nguyên tắc Clean Architecture, phân tách rõ ràng các tầng ứng dụng và định nghĩa các mối quan hệ giữa các thành phần. Phương pháp này giúp tạo ra một cấu trúc ứng dụng có tính mở rộng và dễ bảo trì.
•	Phát triển lặp và tăng dần: Áp dụng quy trình phát triển phần mềm linh hoạt (Agile) với các chu kỳ lặp ngắn, cho phép xây dựng và kiểm thử từng phần của ứng dụng, thu thập phản hồi sớm và điều chỉnh kịp thời. Mỗi chu kỳ lặp tập trung vào một tập hợp tính năng cụ thể, đảm bảo chất lượng trước khi chuyển sang phần tiếp theo.
•	Kiểm thử và đánh giá: Thực hiện kiểm thử đơn vị, kiểm thử tích hợp và kiểm thử người dùng để đảm bảo chất lượng và hiệu suất của ứng dụng. Sau khi phát triển các tính năng cơ bản, ứng dụng được triển khai cho một nhóm người dùng thử nghiệm để thu thập phản hồi và đánh giá trải nghiệm thực tế.
Việc kết hợp các phương pháp nghiên cứu trên giúp đảm bảo rằng ứng dụng được phát triển không chỉ đáp ứng các yêu cầu kỹ thuật mà còn thực sự đáp ứng nhu cầu của người dùng, tạo ra trải nghiệm tốt và có tính cạnh tranh trên thị trường. ”
4. Ý nghĩa và đóng góp của đề tài
Đề tài có“ý nghĩa quan trọng cả về mặt khoa học và thực tiễn. Về mặt khoa học, nghiên cứu này giúp tiếp cận và áp dụng các công nghệ mới trong phát triển ứng dụng di động, đặc biệt là các công nghệ hiện đại như Flutter, Firebase và Clean Architecture. Quá trình thực hiện đề tài cũng giúp đánh giá tính hiệu quả của việc sử dụng các công nghệ này trong phát triển một nền tảng mạng xã hội.
Về giá trị ứng dụng thực tiễn, đề tài hướng đến việc tạo ra một ứng dụng mạng xã hội có thể áp dụng trong thực tế, giúp người dùng kết nối, chia sẻ thông tin và xây dựng cộng đồng. Nếu triển khai thành công, ứng dụng có thể mở rộng để phục vụ nhiều đối tượng người dùng hơn và có tiềm năng phát triển thành một nền tảng mạng xã hội phổ biến trong tương lai.
5. Cấu trúc đồ án
Đồ án được tổ chức theo cấu trúc sau:
Chương 1: Cơ sở lý thuyết
•	   Các khái niệm cơ bản liên quan đến mạng xã hội
•	   Công nghệ và ngôn ngữ lập trình sử dụng (Flutter, Dart)
•	   Các framework và thư viện được áp dụng (Firebase)
•	   Các nguyên tắc thiết kế và kiến trúc phần mềm
Chương 2: Phân tích và thiết kế hệ thống
•	   Phân tích yêu cầu chức năng và phi chức năng
•	   Mô hình hóa hệ thống với các sơ đồ UML
•	   Thiết kế giao diện người dùng
•	   Thiết kế cơ sở dữ liệu
Chương 3: Kết quả cài đặt và thử nghiệm
•	Môi trường phát triển và triển khai
•	Các chức năng đã thực hiện
•	Kết quả kiểm thử và đánh giá hiệu năng
•	So sánh với mục tiêu ban đầu
Phần kết thúc
•	Kết luận và hướng phát triển: Tổng kết kết quả đạt được, hạn chế và đề xuất hướng phát triển tiếp theo.
•	Tài liệu tham khảo: Danh sách các nguồn tài liệu đã tham khảo.
•	Phụ lục: Mã nguồn, tài liệu bổ sung và các nội dung liên quan khác. ”
 

CHƯƠNG 1 CƠ SỞ LÝ THUYẾT
1.1 Các khái niệm liên quan đến đề tài
a.	Mạng xã hội
“Mạng xã hội có thể được định nghĩa là các nền tảng trực tuyến cho phép người sử dụng thiết lập kết nối, chia sẻ thông tin và tương tác với nhau trong không gian số Theo thống kê gần đây, có khoảng 4,9 tỷ người (chiếm 62% dân số toàn cầu) đang sử dụng ít nhất một nền tảng mạng xã hội. Các nền tảng này đã phát triển từ những công cụ giao tiếp đơn giản thành các hệ sinh thái số phức tạp, hỗ trợ đa dạng hoạt động như chia sẻ thông tin, xây dựng cộng đồng, thương mại điện tử, và phát triển kinh doanh” [1].
Các nền tảng mạng xã hội hiện đại thường có những đặc điểm chính như không gian cá nhân hóa, kết nối đa chiều, nội dung được cá nhân hóa theo thuật toán, tương tác đa dạng (thích, bình luận, chia sẻ), hệ thống nhắn tin riêng tư, thông báo thời gian thực và công cụ khám phá nội dung thông minh.
Xu hướng phát triển đáng chú ý bao gồm: nội dung ngắn và trực quan (TikTok, Instagram Reels), tích hợp VR/AR hướng tới metaverse, thương mại xã hội, tăng cường bảo mật, nội dung tạm thời (Stories) và chuyển dịch sang cộng đồng nhỏ theo sở thích. Mạng xã hội đang chuyển đổi từ nền tảng chia sẻ thông tin đơn thuần sang hệ sinh thái kỹ thuật số toàn diện, tích hợp nhiều khía cạnh của đời sống số.
b.	Ứng dụng di động
Ứng dụng di động là phần mềm được thiết kế đặc biệt cho thiết bị di động, đã trở thành công cụ thiết yếu trong đời sống hiện đại [2]. Với 7,1 tỷ người dùng điện thoại thông minh toàn cầu, mỗi người trung bình cài đặt 40 ứng dụng, phản ánh sự phụ thuộc vào công nghệ di động trong nhiều lĩnh vực: từ giao tiếp, giải trí đến y tế, giáo dục và tài chính.
Dựa trên công nghệ phát triển, ứng dụng di động được chia thành ba loại chính [3] [4]:
•	 Native: Phát triển riêng cho từng nền tảng (iOS/Android), mang lại hiệu năng cao và trải nghiệm mượt mà nhưng chi phí lớn và thời gian phát triển dài.
•	 Web app: Trang web được tối ưu cho thiết bị di động, phát triển nhanh và chi phí thấp nhưng hiệu năng hạn chế và phụ thuộc internet.
•	 Hybrid/Crossplatform: Sử dụng framework như Flutter, React Native để phát triển một codebase cho nhiều nền tảng, cân bằng giữa hiệu năng và chi phí.
Xu hướng phát triển nổi bật trong lĩnh vực này gồm: tận dụng công nghệ 5G cho ứng dụng đòi hỏi băng thông lớn, tích hợp AI/ML để cá nhân hóa trải nghiệm, kết nối với hệ sinh thái IoT, ứng dụng VR/AR tạo trải nghiệm tương tác mới, phát triển Instant Apps, tăng cường bảo mật và xu hướng Super App tích hợp nhiều dịch vụ  [5] [2] [6].
1.2 Lý thuyết nền tảng cho việc phát triển hệ thống
1.2.1  Kiến trúc Feature-First
Feature-First là một cách tiếp cận để tổ chức mã nguồn trong quá trình phát triển ứng dụng, đặc biệt được ưa chuộng trong các dự án Flutter. Phương pháp này khác biệt với cách tiếp cận truyền thống (layer-first), vốn tổ chức mã theo loại thành phần. Thay vào đó, Feature-First tập trung vào việc phân chia mã nguồn dựa trên tính năng hoặc các module chức năng cụ thể của ứng dụng [7]. Kiến trúc Feature-First là một cách tiếp cận để tổ chức mã nguồn trong quá trình phát triển ứng dụng, đặc biệt được ưa chuộng trong các dự án Flutter. Phương pháp này khác biệt với cách tiếp cận truyền thống (layer-first), vốn tổ chức mã theo loại thành phần. Thay vào đó, Feature-First tập trung vào việc phân chia mã nguồn dựa trên tính năng hoặc các module chức năng cụ thể của ứng dụng
Trong các dự án Flutter ứng dụng kiến trúc Feature-First, cấu trúc thư mục thường được xây dựng theo mô hình như sau:
 
Hình 1 1Ví dụ về mô hình Feature-First

Kiến trúc Feature-First mang lại nhiều lợi ích trong phát triển ứng dụng [8] :
•	 “ Độ module hóa cao: Các tính năng được thiết kế độc lập, giúp dễ dàng thực hiện các thao tác bổ sung, chỉnh sửa hoặc loại bỏ mà không làm ảnh hưởng đến phần còn lại của ứng dụng.
•	  Hỗ trợ phát triển đồng thời: Các nhóm phát triển có thể làm việc song song trên các tính năng khác nhau mà không lo xung đột.
•	  Tăng khả năng bảo trì: Khi cần thay đổi một tính năng cụ thể, nhà phát triển chỉ cần tập trung vào thư mục liên quan mà không cần tìm kiếm toàn bộ hệ thống.
•	  Tối ưu hóa kiểm thử: Từng tính năng riêng lẻ có thể được kiểm tra độc lập, từ đó nâng cao hiệu quả của quá trình kiểm thử.
•	  Thích ứng dễ dàng: Việc bổ sung các tính năng mới trở nên đơn giản mà không đòi hỏi phải chỉnh sửa cấu trúc hiện có.”

Tuy nhiên, kiến trúc Feature-First cũng có một số thách thức [9]:
•	Trùng lặp mã nguồn: Có thể xảy ra trùng lặp giữa các tính năng nếu không quản lý tốt các thành phần dùng chung.
•	Khó khăn trong việc chia sẻ trạng thái: Việc chia sẻ trạng thái giữa các tính năng có thể phức tạp hơn.
•	Đường cong học tập: Việc làm quen với cấu trúc dự án có thể tốn thời gian đối với những nhà phát triển mới.
Trong các ứng dụng Flutter hiện đại, kiến trúc Feature-First thường được kết hợp với các nguyên tắc Clean Architecture và các thư viện quản lý trạng thái như Riverpod hoặc Bloc. Điều này tạo ra một cấu trúc ứng dụng mạnh mẽ, dễ bảo trì và mở rộng [8]. Ví dụ, mỗi tính năng có thể được tổ chức theo các lớp của Clean Architecture (presentation, domain, data) trong khi vẫn duy trì tính module hóa của Feature-First.
1.2.2 Quản lý trạng thái với Riverpod
Riverpod là một framework quản lý trạng thái mạnh mẽ cho Flutter, được phát triển bởi Remi Rousselet  tác giả của package Provider nổi tiếng. Theo định nghĩa chính thức từ trang web Riverpod.dev, "Riverpod (anagram của Provider) là một reactive caching framework cho Flutter/Dart" [10]. Sử dụng lập trình khai báo và phản ứng, Riverpod đảm nhiệm phần lớn logic ứng dụng, thực hiện các yêu cầu mạng với xử lý lỗi và bộ nhớ đệm tích hợp.
Riverpod giải quyết nhiều thách thức trong việc làm việc với mã bất đồng bộ mà Flutter còn hạn chế. Như tài liệu chính thức đã nêu: "Mặc dù Flutter cung cấp một số cách để tạo biến trạng thái và làm mới UI khi thay đổi, nhưng nó vẫn khá hạn chế. Một số thách thức vẫn chưa được giải quyết" [10]. Những thách thức này bao gồm việc lưu trữ các yêu cầu bất đồng bộ cục bộ, đảm bảo bộ nhớ đệm không bị lỗi thời, và xử lý các trạng thái lỗi và tải.
Điểm mạnh nổi trội của thư viện Riverpod là cơ chế tối ưu hóa việc tính toán lại trạng thái và cập nhật UI chỉ khi cần thiết. Như trang web chính thức giải thích: "Chúng ta không còn phải sắp xếp/lọc danh sách bên trong phương thức build hoặc phải sử dụng cơ chế bộ nhớ đệm nâng cao. Với Provider và 'families', bạn có thể sắp xếp danh sách hoặc thực hiện yêu cầu HTTP chỉ khi thực sự cần thiết" [10].
Ngoài ra, Riverpod còn mang đến nhiều chức năng giá trị như lập trình khai báo, hỗ trợ yêu cầu mạng tích hợp, xử lý tải/lỗi tự động, an toàn khi biên dịch, và khả năng kết hợp các trạng thái dễ dàng [11]. Đặc biệt, Riverpod còn hỗ trợ các mẫu UI phổ biến như "kéo để làm mới" và "tìm kiếm khi gõ" chỉ với vài dòng mã [10].
1.3 Công nghệ và ngôn ngữ lập trình sử dụng
1.3.1 Ngôn ngữ lập trình Dart
A.	Khái niệm
Dart,“một ngôn ngữ lập trình đa nền tảng do Google phát triển, xuất hiện lần đầu tiên năm 2011, với định hướng ban đầu nhằm thay thế JavaScript trong lĩnh vực phát triển ứng dụng web. Tổ chức Ecma International đã tiêu chuẩn hóa Dart qua ECMA-408, với thiết kế tập trung vào việc xây dựng ứng dụng hiệu năng cao trên đa dạng nền tảng. Kể từ khi ra mắt, Dart đã trải qua nhiều thay đổi quan trọng, đặc biệt là khi trở thành ngôn ngữ chính thức cho framework Flutter vào năm 2017, mở rộng phạm vi ứng dụng từ web sang cả di động, desktop và những .
Xét về mặt kỹ thuật, Dart là một ngôn ngữ hướng đối tượng với cú pháp tương tự C, tích hợp nhiều khái niệm lập trình hiện đại như giao diện, mixins, lớp trừu tượng và generics cụ thể hóa. Theo nghiên cứu của Liu và cộng sự (2020), Dart kết hợp ưu điểm của nhiều ngôn ngữ: tính năng class-based từ Java, cú pháp linh hoạt từ JavaScript, và khả năng xử lý bất đồng bộ hiệu quả thông qua Future và Stream. Một trong những đặc điểm nổi bật của Dart là hỗ trợ cả kiểu tĩnh (static typing) và kiểu động (dynamic typing), cho phép lập trình viên linh hoạt trong việc phát triển và bảo trì mã nguồn.
Hệ sinh thái của Dart cung cấp nhiều công cụ thiết yếu: máy ảo Dart VM phục vụ quá trình phát triển và kiểm thử, bộ chuyển đổi dart2js để biến mã nguồn Dart thành JavaScript, và trình biên dịch AOT (Ahead-of-Time) giúp tạo mã máy gốc với hiệu năng tối ưu. Dữ liệu từ GitHub cho thấy, đến năm 2023, Dart đã vươn lên trở thành một trong các ngôn ngữ có tốc độ tăng trưởng mạnh mẽ nhất, phần lớn nhờ vào việc Flutter ngày càng được ưa chuộng trong lĩnh vực xây dựng ứng dụng di động đa nền tảng.”
B.	Ưu điểm
Ngôn ngữ Dart cung cấp nhiều ưu điểm quan trọng trong việc xây dựng ứng dụng hiện đại, nổi bật là trong phát triển ứng dụng di động. Nghiên cứu do Patel và Gupte thực hiện năm 2021 chỉ ra rằng, các ứng dụng được phát triển bằng Flutter/Dart có thể đạt hiệu năng từ 60-90% so với ứng dụng gốc, vượt trội hơn hẳn khi so sánh với các giải pháp đa nền tảng khác như React Native hay Xamarin. Điều này có được nhờ khả năng biên dịch AOT (Ahead-of-Time) của Dart, chuyển đổi mã nguồn thành mã máy native trước khi triển khai, tránh overhead của các giải pháp dựa trên bridge hoặc interpreter .
Tính năng đặc biệt ấn tượng của Dart chính là Hot Reload, công nghệ cho phép nhà phát triển quan sát tức thời kết quả của việc thay đổi mã nguồn mà không cần khởi động lại ứng dụng hay đánh mất trạng thái đang hoạt động. Theo khảo sát của Google (2022), tính năng này giúp tăng năng suất phát triển lên tới 30-50% so với quy trình phát triển truyền thống. Bên cạnh đó, cơ chế xử lý bất đồng bộ của Dart thông qua Future, Stream và async/await được đánh giá cao về tính trực quan và dễ tiếp cận hơn so với cách tiếp cận callback hoặc promise trong JavaScript, hạn chế tình trạng "callback hell" và nâng cao tính rõ ràng của mã nguồn.
Dart 2.12 (2021) giới thiệu tính năng Null Safety, một bước tiến quan trọng giúp loại bỏ lỗi null reference exception trong thời gian chạy. Theo báo cáo của Flutter DevRel Team, việc áp dụng Null Safety đã giúp giảm tới 70% lỗi liên quan đến null trong các ứng dụng sản xuất. Hệ sinh thái package phong phú trên pub.dev với hơn 30.000 package (tính đến 2023) cũng là một lợi thế lớn, cung cấp giải pháp cho hầu hết các nhu cầu phát triển. Ngoài ra, cú pháp rõ ràng và quen thuộc của Dart giúp giảm đáng kể thời gian làm quen cho lập trình viên đã có kinh nghiệm với Java, C, hoặc JavaScript, với đường cong học tập được đánh giá là thoải hơn so với Swift hoặc Kotlin.
C.	Nhược điểm
Bên cạnh những điểm mạnh, Dart vẫn đối mặt với một số thách thức đáng lưu tâm. Dữ liệu từ cuộc khảo sát Stack Overflow 2023 cho thấy chỉ khoảng 6.5% nhà phát triển chuyên nghiệp sử dụng Dart, thấp hơn nhiều so với JavaScript (63.6%), Python (49.2%) và Java (30.5%) . Quy mô cộng đồng hạn chế này ảnh hưởng đến sự sẵn có của tài liệu học tập, số lượng thư viện của bên thứ ba và mức độ hỗ trợ kỹ thuật khi so sánh với các ngôn ngữ có lịch sử phát triển lâu dài hơn. Một nghiên cứu được thực hiện bởi Ahmed và nhóm nghiên cứu (2022) phát hiện rằng thời gian chờ đợi trung bình để nhận được phản hồi cho các câu hỏi liên quan đến Dart trên Stack Overflow kéo dài hơn 30% so với các câu hỏi về JavaScript hoặc Python.
Một hạn chế đáng quan ngại khác là mối quan hệ phụ thuộc giữa Dart và Flutter. Phân tích của Kotlin (2021) tiết lộ rằng trên 90% các dự án sử dụng Dart được triển khai trong môi trường Flutter, cho thấy ngôn ngữ này hiếm khi được áp dụng một cách độc lập cho các mục tiêu khác. Tình trạng này làm dấy lên lo ngại về triển vọng phát triển của ngôn ngữ nếu Flutter không duy trì được độ phổ biến. Trong lĩnh vực phát triển web, nghiên cứu đối chiếu của Chen và cộng sự (2022) đã chỉ ra rằng các ứng dụng web được xây dựng với Dart/Flutter có dung lượng gói lớn hơn 30-40% và tốc độ tải chậm hơn 20-25% khi so sánh với các framework web phổ biến như React hoặc Vue.
Đường cong học tập của một số khái niệm nâng cao trong Dart cũng là thách thức đáng kể. Theo Sharma và Patel (2023), các khái niệm như Isolate (mô hình đa luồng của Dart), Zone và các pattern phức tạp trong Stream đòi hỏi thời gian đáng kể để thành thạo, ngay cả với lập trình viên có kinh nghiệm. Cuối cùng, việc áp dụng các tính năng mới như Null Safety đã tạo ra những thách thức về tương thích ngược. Theo báo cáo của Flutter Team, quá trình chuyển đổi các dự án lớn sang Null Safety có thể mất từ vài ngày đến vài tuần, đặc biệt khi phụ thuộc vào các package chưa được cập nhật.
1.3.2 . Nền tảng Firebase
A.	Khái niệm
“Firebase là một nền tảng phát triển ứng dụng toàn diện được phát triển bởi Google, cung cấp các công cụ và dịch vụ hỗ trợ cho việc xây dựng, quản lý và mở rộng ứng dụng một cách hiệu quả . Được ra đời vào năm 2012, Firebase ban đầu là một dịch vụ cung cấp trò chuyện trực tuyến có tên Envolve, nhưng sau đó đã phát triển thành một nền tảng backend-as-a-service (BaaS) toàn diện khi các nhà phát triển bắt đầu sử dụng nó để đồng bộ hóa dữ liệu ứng dụng theo thời gian thực” [12].
Nền tảng này đặc biệt hữu ích cho việc phát triển ứng dụng di động và web, loại bỏ nhu cầu về lập trình phía máy chủ phức tạp. “Firebase hỗ trợ nhiều nền tảng khác nhau bao gồm Android, iOS, Web, Flutter, Unity và C++, mang đến giải pháp linh hoạt cho các nhà phát triển “ [13]. 
Firebase được tổ chức thành hai nhóm dịch vụ chính: "Build - tập trung vào việc xây dựng ứng dụng với các dịch vụ như Cơ sở dữ liệu thời gian thực, Xác thực, Lưu trữ đám mây; và  Run" - tập trung vào việc vận hành, giám sát và tối ưu hóa ứng dụng với các dịch vụ như Phân tích, Giám sát hiệu suất và Thử nghiệm A/B. Nhiều công ty lớn như The New York Times, NPR, Duolingo, Alibaba và Venmo đã tin tưởng sử dụng Firebase để xây dựng và triển khai ứng dụng hiện đại của họ [13].
B.	Ưu điểm
Firebase mang đến nhiều lợi thế đáng kể cho quá trình phát triển ứng dụng hiện đại. Trước hết, nền tảng này “cung cấp khả năng đồng bộ hóa dữ liệu theo thời gian thực, cho phép cập nhật tức thì trên tất cả thiết bị được kết nối mà không cần làm mới ứng dụng . Điều này đặc biệt hữu ích cho các ứng dụng yêu cầu tương tác người dùng liên tục như trò chuyện, trò chơi nhiều người chơi hoặc ứng dụng cộng tác” [14].
Một ưu điểm nổi bật khác là hệ sinh thái toàn diện của Firebase, tích hợp nhiều dịch vụ trong một nền tảng duy nhất. Các nhà phát triển có thể sử dụng Cơ sở dữ liệu thời gian thực hoặc Cloud Firestore cho lưu trữ dữ liệu, Authentication cho quản lý người dùng, Cloud Functions cho logic phía máy chủ, và Cloud Storage cho lưu trữ tệp - tất cả đều được đồng bộ hóa và hoạt động liền mạch với nhau. Điều này giúp giảm đáng kể thời gian phát triển và chi phí so với việc xây dựng backend từ đầu.
Về mặt chi phí, Firebase cung cấp mô hình “giá linh hoạt với gói Spark miễn phí cho các dự án nhỏ và gói Blaze theo hình thức trả tiền theo mức sử dụng, phù hợp với các ứng dụng đang phát triển . Cộng đồng lớn mạnh với khoảng 1,5 triệu ứng dụng được xây dựng trên Firebase cũng đảm bảo rằng các nhà phát triển luôn có thể tìm thấy hỗ trợ, tài liệu và giải pháp cho các vấn đề phổ biến” [14].
C.	Nhược điểm
Mặc dù Firebase cung cấp nhiều lợi ích, nền tảng này vẫn tồn tại một số hạn chế đáng lưu ý. “Một trong những nhược điểm chính là khả năng truy vấn hạn chế của cơ sở dữ liệu Firebase. Do sử dụng cấu trúc dữ liệu phẳng dạng JSON, Firebase gặp khó khăn trong việc xử lý các truy vấn phức tạp như sắp xếp ngược thứ tự của các mục hoặc lọc dữ liệu theo nhiều tiêu chí “[3]. Điều này có thể trở thành rào cản đáng kể đối với các ứng dụng yêu cầu xử lý dữ liệu phức tạp.
Vấn đề thứ hai liên quan đến tính toàn vẹn dữ liệu. Firestore, với tư cách là “cơ sở dữ liệu NoSQL, có cấu trúc dữ liệu động tương tự như JSON, thiếu các ràng buộc nghiêm ngặt về dữ liệu. Điều này có nghĩa là nhà phát triển không thể áp đặt các ràng buộc ở cấp độ cơ sở dữ liệu và phải duy trì logic nghiệp vụ ở cấp độ mã nguồn “[3]. Khi lỗi không thể tránh khỏi xuất hiện, dữ liệu có thể trở nên lộn xộn và khó quản lý.
Một điểm yếu khác là hiệu suất web. Nghiên cứu so sánh cho thấy các ứng dụng web được phát triển bằng Firebase/Dart có kích thước gói lớn hơn 30-40% và thời gian tải chậm hơn 20-25% so với các framework web hiện đại như React hoặc Vue. Ngoài ra, Firebase lưu trữ dữ liệu trong bộ nhớ, điều này có thể làm chậm quá trình xử lý theo thời gian, đặc biệt khi tích hợp với các microservice .

1.3.3 Visual Studio Code
A.	Khái niệm
“Visual Studio Code  đã trở thành một công cụ không thể thiếu trong hệ sinh thái phát triển phần mềm hiện đại. Được Microsoft giới thiệu lần đầu vào năm 2015, VS Code đã nhanh chóng phát triển thành một trình soạn thảo mã nguồn đa năng với khả năng mở rộng đáng kinh ngạc. Không giống như các IDE truyền thống nặng nề, VS Code được xây dựng trên nền tảng Electron, cho phép nó hoạt động trên nhiều hệ điều hành khác nhau bao gồm Windows, macOS và Linux. Điểm đặc biệt của VS Code là cách tiếp cận nhẹ nhàng nhưng mạnh mẽ, cung cấp một môi trường làm việc tối giản ban đầu nhưng có thể mở rộng theo nhu cầu cụ thể của từng nhà phát triển. Với kiến trúc mở và hệ thống extension phong phú, VS Code cho phép người dùng tùy chỉnh môi trường làm việc của mình, từ giao diện người dùng đến các tính năng chuyên sâu như debugging, kiểm soát phiên bản và tích hợp terminal. Sự kết hợp giữa hiệu suất cao, tính linh hoạt và cộng đồng phát triển tích cực đã giúp VS Code trở thành lựa chọn hàng đầu cho nhiều lập trình viên trên toàn thế giới.
B.	Ưu điểm nổi bật của Visual Studio Code
Visual Studio Code mang đến nhiều lợi thế vượt trội cho các nhà phát triển phần mềm hiện đại. Một trong những điểm mạnh quan trọng nhất là tính đa nền tảng, cho phép nhà phát triển làm việc nhất quán trên Windows, macOS và Linux mà không cần thay đổi công cụ hay quen với nhiều môi trường khác nhau. VS Code nổi bật với hiệu suất ấn tượng, khởi động nhanh và tiêu thụ ít tài nguyên hệ thống hơn so với các IDE truyền thống, đồng thời vẫn cung cấp nhiều tính năng mạnh mẽ. Hệ sinh thái extension phong phú là một ưu điểm không thể bỏ qua, với hàng nghìn tiện ích mở rộng cho phép tùy chỉnh môi trường làm việc theo nhu cầu cụ thể, từ hỗ trợ ngôn ngữ lập trình đến các công cụ phân tích mã nguồn và tích hợp với dịch vụ đám mây. Tính năng IntelliSense thông minh cung cấp gợi ý mã nguồn, hoàn thành mã và phân tích lỗi thời gian thực, giúp tăng năng suất và giảm thiểu lỗi trong quá trình phát triển. Khả năng debugging tích hợp cho nhiều ngôn ngữ lập trình khác nhau, cùng với công cụ kiểm soát phiên bản Git tích hợp sẵn, tạo nên một môi trường phát triển toàn diện. Đặc biệt, VS Code còn hỗ trợ phát triển từ xa thông qua tính năng Remote Development, cho phép nhà phát triển làm việc với mã nguồn trên các máy chủ từ xa, container Docker hoặc WSL (Windows Subsystem for Linux).
C.	Hạn chế của Visual Studio Code
Mặc dù có nhiều ưu điểm, Visual Studio Code vẫn tồn tại một số hạn chế đáng lưu ý. Một trong những điểm yếu cơ bản là VS Code không phải là một IDE đầy đủ tính năng theo nghĩa truyền thống, đòi hỏi người dùng phải cài đặt và cấu hình nhiều extension để đạt được chức năng tương đương với các IDE chuyên biệt như IntelliJ IDEA hay Visual Studio. Điều này có thể tạo ra sự không đồng nhất trong trải nghiệm người dùng và đôi khi gây khó khăn trong việc duy trì môi trường phát triển ổn định. Khi số lượng extension tăng lên, hiệu suất của VS Code có thể bị ảnh hưởng đáng kể, dẫn đến tình trạng khởi động chậm hoặc tiêu thụ bộ nhớ cao. Đối với các dự án lớn và phức tạp, VS Code đôi khi gặp khó khăn trong việc xử lý hiệu quả, đặc biệt là khi so sánh với các IDE chuyên biệt được tối ưu hóa cho các ngôn ngữ cụ thể. Mặc dù hỗ trợ nhiều ngôn ngữ lập trình, chất lượng hỗ trợ không đồng đều giữa các ngôn ngữ, với một số ngôn ngữ ít phổ biến có trải nghiệm kém hơn do thiếu các extension chất lượng cao. Cuối cùng, do được xây dựng trên nền tảng Electron, VS Code vẫn tiêu thụ nhiều tài nguyên hơn so với các trình soạn thảo mã nguồn gốc như Sublime Text hay Vim, đặc biệt là khi làm việc trong thời gian dài hoặc trên các thiết bị có cấu hình thấp.
1.4 Các framework và thư viện được sử dụng
1.4.1 Flutter (Crossplatform UI framework)
D.	Khái niệm về Flutter
“Theo tài liệu chính thức của Flutter (2023), Flutter được định nghĩa là “bộ công cụ UI nguồn mở của Google để xây dựng ứng dụng đẹp, được biên dịch gốc cho di động, web và desktop từ một codebase duy nhất. Công nghệ này đã tạo ra một cuộc cách mạng trong phát triển ứng dụng đa nền tảng bằng cách cung cấp giải pháp toàn diện cho các nhà phát triển”. Điểm đặc biệt của Flutter là cách tiếp cận độc đáo khi kết hợp "một framework hiện đại, phản ứng, một công cụ rendering 2D, các widget sẵn có và các công cụ phát triển, để tạo ra một hệ sinh thái phát triển hoàn chỉnh. Triết lý thiết kế của Flutter nhấn mạnh vào khả năng tái sử dụng mã nguồn trên nhiều nền tảng khác nhau, đồng thời vẫn duy trì khả năng tích hợp sâu với từng hệ điều hành cụ thể” [15]. Như tài liệu chính thức đã chỉ ra, "hầu hết mã Flutter của bạn có thể được chia sẻ giữa các nền tảng, nhưng Flutter cũng bao gồm các thành phần cụ thể cho nền tảng như điều hướng, cuộn và biểu tượng" [15]. Cách tiếp cận này cho phép nhà phát triển tận dụng tối đa lợi thế của việc phát triển đa nền tảng mà không phải hy sinh trải nghiệm người dùng đặc trưng của từng hệ điều hành.
Ưu điểm của Flutter
Flutter mang đến nhiều lợi thế vượt trội cho các nhà phát triển ứng dụng di động. Tài liệu chính thức của Flutter (2023) nhấn mạnh rằng một trong những ưu điểm quan trọng nhất là "năng suất cao" khi cho phép "xây dựng, kiểm thử và triển khai ứng dụng đẹp cho di động, web và desktop từ một codebase duy nhất". Khả năng tập trung vào một mã nguồn duy nhất giúp tối ưu hóa thời gian và nguồn lực phát triển. Về mặt hiệu suất, Flutter nổi bật với khả năng "được biên dịch thành mã máy gốc, không cần cầu nối JavaScript" [15] , dẫn đến ứng dụng "khởi động nhanh và chạy mượt mà, không bị giật lag". Một điểm mạnh khác của Flutter là cung cấp "thiết kế đẹp, linh hoạt" thông qua "các widget Material Design và Cupertino (iOS) được xây dựng sẵn" [15] , cho phép nhà phát triển tạo ra giao diện người dùng phong phú và có thể tùy chỉnh hoàn toàn. Tính năng "Hot reload" được đánh giá cao vì "giúp bạn thử nghiệm, xây dựng UI, thêm tính năng và sửa lỗi nhanh hơn" với khả năng hiển thị kết quả "trong vài mili giây mà không mất trạng thái ứng dụng" [15] . Cuối cùng, bản chất "mã nguồn mở" của Flutter tạo điều kiện cho một cộng đồng phát triển mạnh mẽ và liên tục cải tiến.”
Nhược điểm của Flutter
Flutter vẫn đang đối mặt với một số thách thức đáng lưu ý. Theo tài liệu chính thức (2023), một hạn chế đáng kể là vấn đề "kích thước ứng dụng" khi "ứng dụng Flutter có thể lớn hơn so với các ứng dụng gốc tương đương vì chúng bao gồm công cụ rendering và các widget". Cụ thể, "kích thước ứng dụng ban đầu cho một ứng dụng Flutter tối thiểu là khoảng 4MB trên Android và 10MB trên iOS sau khi nén" [15] . Một thách thức khác liên quan đến "đường cong học tập" khi Dart - ngôn ngữ lập trình của Flutter - "không phổ biến như JavaScript hoặc Java" [15] , đòi hỏi thời gian để làm quen. Về hệ sinh thái, mặc dù đang phát triển nhanh chóng, "một số thư viện và plugin có thể không hoàn thiện hoặc ổn định như các nền tảng trưởng thành hơn" [15] . Đối với các tính năng đặc thù của nền tảng, Flutter có thể đòi hỏi "tích hợp gốc phức tạp" khi "cần phải viết mã gốc và tích hợp nó với Flutter thông qua kênh nền tảng" [15] . Cuối cùng, mặc dù Flutter đã mở rộng sang web, "hỗ trợ nền tảng web đang phát triển" và "có thể không mang lại trải nghiệm tối ưu cho tất cả các trường hợp sử dụng web" [15] , đặc biệt với các ứng dụng phức tạp hoặc yêu cầu SEO cao.
 
CHƯƠNG 2 PHÂN TÍCH THIẾT KẾ HỆ THỐNG 
2.1 Khảo sát hệ thống
2.1.1 Phân tích vấn đề hiện tại
Thị trường mạng xã hội hiện nay đang chứng kiến sự cạnh tranh mạnh mẽ giữa các nền tảng lớn như Facebook, Instagram, TikTok và Twitter. Tuy nhiên, qua nghiên cứu thị trường và phân tích phản hồi của người dùng, có thể xác định một số vấn đề tồn tại trên các nền tảng này:
a.	Tùy biến hạn chế
Các nền tảng mạng xã hội hiện tại thường áp đặt một trải nghiệm đồng nhất cho tất cả người dùng, với khả năng tùy biến rất hạn chế. Theo khảo sát của Nielsen, "78% người dùng mong muốn có khả năng điều chỉnh giao diện, bố cục và luồng nội dung theo sở thích cá nhân" [16]. Phân tích dữ liệu từ AppAnnie cho thấy "các ứng dụng cho phép tùy biến cao có tỷ lệ giữ chân người dùng (retention rate) cao hơn 35% so với các ứng dụng có giao diện cố định" [17].Vấn đề này thể hiện qua nhiều khía cạnh:
•	Giao diện người dùng thiếu linh hoạt, không cho phép điều chỉnh bố cục, màu sắc hoặc chủ đề
•	Thuật toán hiển thị nội dung áp đặt, người dùng ít có quyền kiểm soát loại nội dung xuất hiện trên bảng tin
•	Hạn chế trong việc lọc và phân loại nội dung theo sở thích cá nhân
•	Thiếu các tùy chọn hiển thị nội dung (chế độ xem, sắp xếp, lọc)
b.	Chi phí duy trì cao
Các nền tảng mạng xã hội lớn vận hành trên cơ sở hạ tầng phức tạp và tốn kém, khiến việc phát triển và duy trì một nền tảng tương tự trở nên khó khăn đối với các doanh nghiệp nhỏ và startup. Theo báo cáo của Gartner, "chi phí trung bình để xây dựng và vận hành một nền tảng mạng xã hội truyền thống có thể lên đến 1-2 triệu USD trong năm đầu tiên, chưa kể chi phí marketing và phát triển người dùng" [18].Phân tích chi tiết về chi phí cho thấy:
•	Cơ sở hạ tầng máy chủ truyền thống đòi hỏi đầu tư lớn ban đầu và chi phí bảo trì cao
•	Xử lý dữ liệu lớn (Big Data) và phân tích thời gian thực tiêu tốn nhiều tài nguyên tính toán
•	Băng thông mạng tăng cao khi số lượng người dùng và nội dung đa phương tiện tăng
•	Chi phí nhân sự kỹ thuật cao để duy trì và mở rộng hệ thống
•	Thiếu các giải pháp tối ưu hóa chi phí cho các doanh nghiệp nhỏ
c.	Bảo mật dữ liệu
Các sự cố rò rỉ dữ liệu từ các nền tảng lớn đã làm dấy lên lo ngại nghiêm trọng về bảo mật thông tin cá nhân. Theo báo cáo của IBM Security, "chi phí trung bình của một vụ vi phạm dữ liệu trong lĩnh vực mạng xã hội là 4.45 triệu USD, cao hơn 15% so với mức trung bình của các ngành khác" [19]. Khảo sát của Pew Research Center cho thấy "72% người dùng lo ngại về cách các nền tảng mạng xã hội thu thập và sử dụng dữ liệu của họ" [20]. Phân tích các vấn đề bảo mật chính bao gồm:
•	Thiếu tính minh bạch trong việc thu thập và sử dụng dữ liệu người dùng
•	Cơ chế xác thực yếu, dễ bị tấn công bởi các phương pháp như lừa đảo (phishing) và tấn công brute-force
•	Lỗ hổng trong việc lưu trữ và truyền tải dữ liệu nhạy cảm
•	Thiếu các biện pháp bảo vệ quyền riêng tư như mã hóa đầu cuối cho tin nhắn
•	Hạn chế trong việc kiểm soát quyền truy cập dữ liệu của bên thứ ba
d.	Trải nghiệm người dùng không nhất quán
Phân tích hành vi người dùng cho thấy sự không nhất quán trong trải nghiệm giữa các nền tảng và thiết bị khác nhau. Theo nghiên cứu của UX Planet, "65% người dùng gặp khó khăn khi chuyển đổi giữa phiên bản di động và web của cùng một nền tảng mạng xã hội" [6]. Điều này dẫn đến sự phân mảnh trong trải nghiệm người dùng và làm giảm mức độ tương tác.Các vấn đề về trải nghiệm người dùng bao gồm:
•	Giao diện và chức năng không đồng nhất giữa các nền tảng (iOS, Android, web)
•	Thời gian phản hồi chậm trên các thiết bị có cấu hình thấp
•	Thiếu hỗ trợ cho chế độ ngoại tuyến và kết nối không ổn định
•	Giao diện người dùng phức tạp, gây khó khăn cho người dùng mới
•	Khả năng tiếp cận hạn chế cho người dùng khuyết tật
Dựa trên phân tích các vấn đề trên, ứng dụng mạng xã hội được phát triển trong đề tài này nhằm mục đích khắc phục những hạn chế này bằng cách tạo ra một nền tảng:
•	Cho phép tùy biến cao, đáp ứng nhu cầu cá nhân hóa của người dùng
•	Tối ưu hóa chi phí phát triển và vận hành thông qua kiến trúc hiện đại
•	Ưu tiên bảo mật và quyền riêng tư của người dùng từ thiết kế ban đầu
•	Cung cấp trải nghiệm nhất quán và mượt mà trên các nền tảng khác nhau
Việc giải quyết các vấn đề này không chỉ tạo ra một sản phẩm cạnh tranh mà còn đáp ứng nhu cầu ngày càng tăng của người dùng về một nền tảng mạng xã hội an toàn, linh hoạt và dễ tiếp cận.
2.2 Yêu cầu chức năng và Yêu cầu phi chức năng
2.2.1 Yêu cầu chức năng 
Hệ thống bao gồm các chức năng chính sau: “
a.	Quản lý người dùng:
•	Đăng ký, đăng nhập bằng email, Google, Facebook.
•	Cập nhật thông tin cá nhân, ảnh đại diện.
•	Đổi mật khẩu, đặt lại mật khẩu khi quên.
b.	Quản lý bài viết:
•	Tạo bài viết với nội dung văn bản, hình ảnh, video.
•	Chỉnh sửa, xóa bài viết.
•	Hiển thị danh sách bài viết theo thời gian thực.
c.	Quản lý bình luận và lượt thích:
•	Người dùng có thể bình luận dưới bài viết.
•	Thả yêu thích vào bài viết.
•	Xóa bình luận, đếm số lượt thích.
d.	Quản lý video:
•	Hỗ trợ tải lên video từ thiết bị.
•	Phát video với cơ chế tự động phát khi cuộn đến.
•	Dừng phát video khi rời khỏi màn hình.
e.	Nhắn tin:
•	Gửi tin nhắn văn bản, hình ảnh, video.
•	Hiển thị danh sách tin nhắn gần đây.
•	Hỗ trợ gửi tin nhắn theo thời gian thực.”
f.	Quản lý bạn bè:
•	Gửi lời mời kết bạn.
•	Chấp nhận hoặc từ chối lời mời kết bạn.
•	Hủy kết bạn, xem danh sách bạn bè.”
g.	Thông báo:
•	Hệ thống gửi thông báo theo thời gian thực khi có tương tác mới.
•	Thông báo về tin nhắn mới.
•	Thông báo về yêu cầu kết bạn.
h.	Quản trị hệ thống:
•	Quản lý nội dung bài viết vi phạm.
•	Duy trì và tối ưu hệ thống.
2.2.2 Yêu cầu phi chức năng 
a.	Hiệu suất:
•	Ứng dụng cần đảm bảo tải nhanh, phản hồi tốt ngay cả khi có nhiều người dùng truy cập.
•	Hỗ trợ lazy loading, pagination để tối ưu dữ liệu và hiệu suất.
•	Sử dụng image compression để giảm dung lượng ảnh tải lên mà vẫn đảm bảo chất lượng hiển thị.
b.	Bảo mật:
•	Xác thực người dùng an toàn với Firebase Authentication.
•	Dữ liệu quan trọng như mật khẩu luôn luôn được mã hóa trước khi lưu trữ.
•	Áp dụng Firebase Security Rules để kiểm soát quyền truy cập Firestore và Storage.
•	Kiểm soát session, ngăn chặn truy cập trái phép bằng cách đặt thời gian hết hạn phiên làm việc.
c.	Khả năng mở rộng:
•	Hệ thống cần dễ dàng mở rộng để hỗ trợ lượng người dùng lớn hơn trong tương lai.
•	Firestore và Storage có thể mở rộng theo nhu cầu thực tế mà không ảnh hưởng đến hiệu suất.
d.	Tính ổn định:
•	Đảm bảo ứng dụng chạy mượt mà, không xảy ra lỗi nghiêm trọng.
•	Kiểm soát lỗi bằng hệ thống logging và crash reporting.
•	Sử dụng retry mechanism để xử lý lỗi kết nối mạng.”
e.	Tương thích đa nền tảng:”
•	Hoạt động trên cả Android và iOS mà không cần thay đổi nhiều về code.
•	Tối ưu giao diện cho các kích thước màn hình khác nhau bằng Responsive Design.

2.3  Đặc tả chức năng
2.3.1 Đặc tả chức năng – Đăng ký
Mục	Mô tả
Use Case Name	Đăng ký tài khoản
Descriptions	Cho phép người dùng tạo tài khoản mới trên ứng dụng mạng xã hội
Actor	Khách (người dùng chưa đăng nhập)
Priority	Cao
Trigger	Người dùng nhấn vào nút "Đăng ký"
Pre-conditions	Người dùng chưa có tài khoản
Post-conditions	Người dùng có tài khoản mới và có thể đăng nhập vào hệ thống
Basic Flow	1. Người dùng nhập email, mật khẩu, tên hiển thị
2. Người dùng nhấn nút "Đăng ký"
3. Hệ thống kiểm tra tính hợp lệ của dữ liệu
4. Hệ thống tạo tài khoản mới
5. Hệ thống gửi email xác minh
6. Người dùng xác minh tài khoản
7. Hệ thống chuyển hướng đến trang đăng nhập
Alternative Flow	1. Người dùng yêu cầu gửi lại email xác minh
2. Người dùng đăng nhập trực tiếp sau khi đăng ký thành công
Exception Flow	1. Dữ liệu không hợp lệ: Hiển thị thông báo lỗi
2. Email đã tồn tại: Gợi ý chuyển đến trang đăng nhập
3. Người dùng không xác minh email: Tài khoản bị giới hạn chức năng
Functional Requirements	1. Kiểm tra định dạng email hợp lệ
2. Kiểm tra email đã tồn tại
3. Mã hóa mật khẩu
4. Gửi email xác minh
5. Cập nhật trạng thái tài khoản
Non-Functional Requirements	1. Thời gian phản hồi < 3 giây
2. Mật khẩu được mã hóa an toàn
3. Giao diện thân thiện và responsive
Bảng 2 1 Đặc tả chức năng – Đăng ký

2.3.2 Đặc tả chức năng - Đăng nhập.

Mục	Mô tả
Use Case Name	Đăng nhập
Descriptions	Cho phép người dùng đã có tài khoản truy cập vào ứng dụng mạng xã hội
Actor	Khách (người dùng chưa đăng nhập)
Priority	Cao
Trigger	Người dùng nhấn vào nút "Đăng nhập"
Pre-conditions	Người dùng đã có tài khoản
Post-conditions	Người dùng đăng nhập thành công và truy cập được vào hệ thống
Basic Flow	1. Người dùng nhập email/tên đăng nhập và mật khẩu
2. Người dùng nhấn nút "Đăng nhập"
3. Hệ thống kiểm tra thông tin đăng nhập
4. Hệ thống tạo phiên đăng nhập
5. Hệ thống chuyển hướng đến trang chính
Alternative Flow	1. Người dùng chọn "Lưu thông tin đăng nhập"
2. Người dùng chọn "Quên mật khẩu"
Exception Flow	1. Thông tin không chính xác: Hiển thị thông báo lỗi
2. Tài khoản chưa xác minh: Chuyển hướng đến trang xác minh email
3. Lỗi kết nối: Hiển thị thông báo lỗi
Functional Requirements	1. Xác thực thông tin đăng nhập
2. Tạo và lưu phiên đăng nhập
3. Kiểm tra trạng thái xác minh tài khoản
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Bảo mật thông tin đăng nhập
3. Giao diện thân thiện và responsive
Bảng 2 2 Đặc tả chức năng – Đăng nhập
2.3.3 Đặc tả chức năng - Nhắn tin

Mục	Mô tả
Use Case Name	Nhắn tin
Descriptions	Cho phép người dùng gửi và nhận tin nhắn với người dùng khác
Actor	Người dùng đã đăng nhập
Priority	Cao
Trigger	Người dùng mở cuộc trò chuyện hoặc nhấn nút "Nhắn tin"
Pre-conditions	Người dùng đã đăng nhập vào hệ thống
Post-conditions	Tin nhắn được gửi và hiển thị trong cuộc trò chuyện
Basic Flow	1. Người dùng chọn người nhận tin nhắn
2. Hệ thống kiểm tra và hiển thị lịch sử tin nhắn (nếu có)
3. Người dùng nhập nội dung tin nhắn
4. Người dùng nhấn nút "Gửi"
5. Hệ thống lưu tin nhắn
6. Hệ thống hiển thị tin nhắn cho người gửi và người nhận
Alternative Flow	1. Người dùng gửi file/hình ảnh
2. Người dùng tạo nhóm chat
Exception Flow	1. Lỗi kết nối: Hiển thị thông báo lỗi và lưu tin nhắn vào hàng đợi
2. Người nhận không tồn tại: Hiển thị thông báo lỗi
Functional Requirements	1. Lưu và hiển thị tin nhắn theo thời gian thực
2. Hỗ trợ gửi file/hình ảnh
3. Tạo thông báo cho người nhận
Non-Functional Requirements	1. Độ trễ thấp (< 1 giây)
2. Bảo mật nội dung tin nhắn
3. Giao diện thân thiện và responsive
Bảng 2 3 Đặc tả chức năng – Nhắn tin

2.3.4 Đặc tả chức năng – Xem thông báo 
Mục	Mô tả
Use Case Name	Xem thông báo”
Descriptions	Cho phép người dùng xem các thông báo về hoạt động liên quan đến tài khoản
Actor	Người dùng đã đăng nhập
Priority	Trung bình
Trigger	Người dùng nhấn vào biểu tượng thông báo
Pre-conditions	Người dùng đã đăng nhập vào hệ thống
Post-conditions	Người dùng xem được danh sách thông báo
Basic Flow	1. Người dùng nhấn vào biểu tượng thông báo
2. Hệ thống hiển thị danh sách thông báo
3. Người dùng xem thông báo
4. Hệ thống đánh dấu thông báo đã đọc
Alternative Flow	1. Người dùng nhấn vào một thông báo cụ thể
2. Người dùng đánh dấu tất cả là đã đọc
Exception Flow	1. Không có thông báo: Hiển thị thông báo "Không có thông báo mới"
2. Lỗi kết nối: Hiển thị thông báo lỗi
Functional Requirements	1. Hiển thị danh sách thông báo
2. Đánh dấu thông báo đã đọc
3. Chuyển hướng đến nội dung liên quan khi nhấn vào thông báo
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Cập nhật thông báo mới theo thời gian thực
3. Giao diện thân thiện và responsive
Bảng 2 4 Đặc tả chức năng – Xem thông báo
2.3.5 Đặc tả chức năng –  Quản lý thông tin hồ sơ cá nhân

Mục	Mô tả
Use Case Name	Quản lý thông tin cá nhân
Descriptions	Cho phép người dùng xem và cập nhật thông tin cá nhân
Actor	Người dùng đã đăng nhập
Priority	Cao
Trigger	Người dùng truy cập vào trang hồ sơ cá nhân
Pre-conditions	Người dùng đã đăng nhập vào hệ thống
Post-conditions	Thông tin cá nhân được cập nhật hoặc hiển thị
Basic Flow	1. Người dùng truy cập trang hồ sơ cá nhân
2. Hệ thống hiển thị thông tin hiện tại”
3. Người dùng chỉnh sửa thông tin
4. Người dùng lưu thay đổi
5. Hệ thống cập nhật thông tin
Alternative Flow	1. Người dùng thay đổi ảnh đại diện
2. Người dùng thay đổi mật khẩu
Exception Flow	1. Thông tin không hợp lệ: Hiển thị thông báo lỗi
2. Lỗi kết nối: Hiển thị thông báo lỗi
Functional Requirements	1. Hiển thị thông tin cá nhân
2. Cập nhật thông tin cá nhân
3. Thay đổi ảnh đại diện
4. Thay đổi mật khẩu
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Bảo mật thông tin cá nhân
3. Giao diện thân thiện và responsive
Bảng 2 5 Đặc tả chức năng – Quản lý thông tin cá nhân
2.3.6 Đặc tả chức năng – Thêm bài viết
Mục	Mô tả
Use Case Name	Thêm bài viết
Descriptions	Cho phép người dùng tạo bài viết mới trên ứng dụng mạng xã hội
Actor	Người dùng đã đăng nhập
Priority	Cao
Trigger	Người dùng nhấn nút "Thêm bài viết"
Pre-conditions	Người dùng đã đăng nhập vào hệ thống
Post-conditions	Bài viết mới được tạo và hiển thị
Basic Flow	1. Người dùng nhấn nút "Thêm bài viết"
2. Hệ thống hiển thị form tạo bài viết
3. Người dùng nhập nội dung
4. Người dùng đính kèm media (nếu cần)
5. Người dùng nhấn "Đăng"
6. Hệ thống lưu và hiển thị bài viết
Alternative Flow	1. Người dùng hủy tạo bài viết
Exception Flow	1. Lỗi kết nối: Hiển thị thông báo lỗi”
2. Nội dung không hợp lệ: Hiển thị thông báo lỗi
Functional Requirements	1. Nhập nội dung bài viết
2. Đính kèm media
3. Lưu bài viết vào cơ sở dữ liệu
Non-Functional Requirements	1. Thời gian phản hồi < 3 giây
2. Hỗ trợ nhiều định dạng media
3. Giao diện thân thiện và responsive
Bảng 2 6 Đặc tả chức năng – Thêm bài viết
2.3.7 Đặc tả chức năng – Chỉnh sửa bài viết
Mục	Mô tả
Use Case Name	Chỉnh sửa bài viết
Descriptions	Cho phép người dùng chỉnh sửa bài viết đã đăng
Actor	Người dùng đã đăng nhập
Priority	Trung bình
Trigger	Người dùng nhấn nút "Chỉnh sửa" trên bài viết
Pre-conditions	1. Người dùng đã đăng nhập vào hệ thống
2. Người dùng là tác giả của bài viết
Post-conditions	Bài viết được cập nhật với nội dung mới
Basic Flow	1. Người dùng truy cập bài viết cần chỉnh sửa
2. Người dùng nhấn nút "Chỉnh sửa"
3. Hệ thống hiển thị form chỉnh sửa với nội dung hiện tại
4. Người dùng chỉnh sửa nội dung
5. Người dùng thay đổi media (nếu cần)
6. Người dùng nhấn "Lưu thay đổi"
7. Hệ thống cập nhật bài viết
Alternative Flow	1. Người dùng hủy chỉnh sửa bài viết
Exception Flow	1. Lỗi kết nối: Hiển thị thông báo lỗi
2. Nội dung không hợp lệ: Hiển thị thông báo lỗi
3. Người dùng không có quyền chỉnh sửa: Hiển thị thông báo lỗi
Functional Requirements	1. Hiển thị form chỉnh sửa với nội dung hiện tại
2. Cập nhật nội dung bài viết
3. Thay đổi media”
Non-Functional Requirements	1. Thời gian phản hồi < 3 giây
2. Hỗ trợ nhiều định dạng media
3. Giao diện thân thiện và responsive
Bảng 2 7 Đặc tả chức năng – Chỉnh sửa bài viết
2.3.8 Đặc tả chức năng – Xóa bài viết
Mục	Mô tả
Use Case Name	Xóa bài viết
Descriptions	Cho phép người dùng xóa bài viết đã đăng
Actor	Người dùng đã đăng nhập
Priority	Trung bình
Trigger	Người dùng nhấn nút "Xóa bài viết"
Pre-conditions	1. Người dùng đã đăng nhập vào hệ thống
2. Người dùng là tác giả của bài viết
Post-conditions	Bài viết được xóa khỏi hệ thống
Basic Flow	1. Người dùng truy cập bài viết cần xóa
2. Người dùng nhấn nút "Xóa bài viết"
3. Hệ thống hiển thị hộp thoại xác nhận
4. Người dùng xác nhận xóa
5. Hệ thống xóa bài viết
Alternative Flow	1. Người dùng hủy xóa bài viết
Exception Flow	1. Lỗi kết nối: Hiển thị thông báo lỗi
2. Người dùng không có quyền xóa: Hiển thị thông báo lỗi
Functional Requirements	1. Xác nhận xóa bài viết
2. Xóa bài viết và dữ liệu liên quan (media, bình luận, lượt thích)
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Giao diện thân thiện và responsive
Bảng 2 8 Đặc tả chức năng – Xóa bài viết

2.3.9 Đặc tả chức năng – Kết bạn
Mục	Mô tả
Use Case Name	Kết bạn
Descriptions	Cho phép người dùng gửi lời mời kết bạn đến người dùng khác
Actor	Người dùng đã đăng nhập
Priority	Cao
Trigger	Người dùng nhấn nút "Gửi lời mời kết bạn"
Pre-conditions	1. Người dùng đã đăng nhập vào hệ thống
2. Người dùng đang xem hồ sơ của người dùng khác
3. Chưa có mối quan hệ bạn bè hoặc lời mời kết bạn đang chờ xử lý
Post-conditions	Lời mời kết bạn được gửi và người nhận nhận được thông báo
Basic Flow	1. Người dùng truy cập hồ sơ người dùng khác
2. Hệ thống kiểm tra trạng thái kết bạn
3. Hệ thống hiển thị nút "Gửi lời mời kết bạn"
4. Người dùng nhấn nút "Gửi lời mời kết bạn"
5. Hệ thống lưu lời mời kết bạn
6. Hệ thống tạo thông báo cho người nhận
7. Hệ thống cập nhật trạng thái nút thành "Đã gửi lời mời"
Alternative Flow	Không có
Exception Flow	1. Nếu người dùng đã gửi lời mời trước đó: Hiển thị trạng thái "Đã gửi lời mời"
2. Nếu đã là bạn bè: Hiển thị trạng thái "Bạn bè"
3. Nếu người dùng bị chặn: Không hiển thị nút kết bạn
Functional Requirements	1. Kiểm tra trạng thái kết bạn hiện tại
2. Lưu trữ lời mời kết bạn
3. Tạo thông báo cho người nhận
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Giao diện trực quan, dễ sử dụng
Bảng 2 10 Đặc tả chức năng – Kết bạn
2.3.10 Đặc tả chức năng – Đồng ý kết bạn

Mục	Mô tả
Use Case Name	Đồng ý kết bạn
Descriptions	Cho phép người dùng chấp nhận hoặc từ chối lời mời kết bạn từ người dùng khác
Actor	Người dùng đã đăng nhập
Priority	Cao
Trigger	Người dùng nhấn vào thông báo lời mời kết bạn
Pre-conditions	1. Người dùng đã đăng nhập vào hệ thống
2. Người dùng đã nhận được lời mời kết bạn
Post-conditions	Lời mời kết bạn được chấp nhận hoặc từ chối
Basic Flow	1. Người dùng nhận thông báo lời mời kết bạn
2. Người dùng mở màn hình thông báo
3. Người dùng nhấn vào thông báo lời mời kết bạn
4. Hệ thống hiển thị hồ sơ người gửi lời mời
5. Hệ thống hiển thị tùy chọn chấp nhận/từ chối
6. Người dùng nhấn "Chấp nhận"
7. Hệ thống cập nhật trạng thái kết bạn thành "accepted"
8. Hệ thống tạo thông báo cho người gửi lời mời
9. Hệ thống cập nhật giao diện hiển thị
Alternative Flow	1. Ở bước 6, người dùng nhấn "Từ chối"
2. Hệ thống xóa lời mời kết bạn
3. Hệ thống cập nhật giao diện hiển thị
Exception Flow	1. Nếu lời mời không còn tồn tại: Hiển thị thông báo lỗi
2. Nếu người gửi đã hủy lời mời: Hiển thị thông báo tương ứng
Functional Requirements	1. Cập nhật trạng thái kết bạn
2. Tạo thông báo cho người gửi lời mời
3. Cập nhật giao diện người dùng
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Giao diện trực quan, dễ sử dụng
Bảng 2 11 Đặc tả chức năng – Đồng ý kết bạn
2.3.11 Đặc tả chức năng – Xóa bạn bè
Mục	Mô tả
Use Case Name	Xóa bạn bè
Descriptions	Cho phép người dùng xóa mối quan hệ bạn bè với người dùng khác
Actor	Người dùng đã đăng nhập
Priority	Trung bình
Trigger	Người dùng nhấn nút "Bạn bè" và chọn "Hủy kết bạn"
Pre-conditions	1. Người dùng đã đăng nhập vào hệ thống
2. Người dùng đã có mối quan hệ bạn bè với người dùng khác
Post-conditions	Mối quan hệ bạn bè được xóa khỏi hệ thống
Basic Flow	1. Người dùng truy cập hồ sơ bạn bè
2. Hệ thống hiển thị nút "Bạn bè"
3. Người dùng nhấn nút "Bạn bè"
4. Hệ thống hiển thị menu tùy chọn
5. Người dùng chọn "Hủy kết bạn"
6. Hệ thống hiển thị hộp thoại xác nhận
7. Người dùng xác nhận xóa
8. Hệ thống xóa mối quan hệ bạn bè
Alternative Flow	1. Người dùng chọn "Chặn người dùng" sau khi hủy kết bạn
Exception Flow	1. Lỗi kết nối: Hiển thị thông báo lỗi
Functional Requirements	1. Xác nhận xóa bạn bè
2. Xóa mối quan hệ bạn bè
3. Cập nhật trạng thái kết bạn
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Giao diện trực quan, dễ sử dụng
Bảng 2 12 Đặc tả chức năng – Xóa bạn bè
2.3.12 Đặc tả chức năng – Tạo nhóm chat

Mục	Mô tả
Use Case Name	Tạo nhóm chat
Descriptions	Cho phép người dùng tạo nhóm chat với nhiều người dùng khác
Actor	Người dùng đã đăng nhập
Priority	Cao
Trigger	Người dùng nhấn nút "Tạo nhóm chat mới"
Pre-conditions	Người dùng đã đăng nhập vào hệ thống
Post-conditions	Nhóm chat mới được tạo và hiển thị trong danh sách chat
Basic Flow	1. Người dùng nhấn nút "Tạo nhóm chat mới"
2. Hệ thống hiển thị form tạo nhóm
3. Người dùng nhập tên nhóm
4. Người dùng chọn thành viên từ danh sách bạn bè
5. Người dùng tải lên ảnh nhóm (tùy chọn)
6. Người dùng nhấn "Tạo nhóm"
7. Hệ thống tạo nhóm chat mới
8. Hệ thống chuyển hướng đến cuộc trò chuyện nhóm
Alternative Flow	1. Người dùng hủy tạo nhóm chat
Exception Flow	1. Lỗi kết nối: Hiển thị thông báo lỗi
2. Không chọn thành viên: Hiển thị thông báo lỗi
Functional Requirements	1. Nhập tên nhóm
2. Chọn thành viên nhóm
3. Tải lên ảnh nhóm
4. Tạo nhóm chat mới
Non-Functional Requirements	1. Thời gian phản hồi < 3 giây
2. Giao diện trực quan, dễ sử dụng
Bảng 2 13 Đặc tả chức năng – Tạo nhóm chat

2.3.13 Đặc tả chức năng – Sửa nhóm chat
Mục	Mô tả
Use Case Name	Sửa nhóm chat
Descriptions	Cho phép người dùng chỉnh sửa thông tin nhóm chat
Actor	Người dùng đã đăng nhập (quản trị viên nhóm)
Priority	Trung bình
Trigger	Người dùng nhấn nút "Chỉnh sửa nhóm" trong thông tin nhóm
Pre-conditions	1. Người dùng đã đăng nhập vào hệ thống
2. Người dùng là thành viên của nhóm chat
3. Người dùng có quyền chỉnh sửa nhóm
Post-conditions	Thông tin nhóm chat được cập nhật
Basic Flow	1. Người dùng truy cập vào nhóm chat
2. Người dùng chọn "Thông tin nhóm"
3. Người dùng chọn "Chỉnh sửa nhóm"
4. Hệ thống hiển thị form chỉnh sửa với thông tin hiện tại
5. Người dùng cập nhật tên nhóm (nếu cần)
6. Người dùng thay đổi ảnh nhóm (nếu cần)
7. Người dùng thêm/xóa thành viên (nếu cần)
8. Người dùng nhấn "Lưu thay đổi"
9. Hệ thống cập nhật thông tin nhóm
Alternative Flow	1. Người dùng hủy chỉnh sửa nhóm
Exception Flow	1. Lỗi kết nối: Hiển thị thông báo lỗi
2. Người dùng không có quyền chỉnh sửa: Hiển thị thông báo lỗi
Functional Requirements	1. Cập nhật tên nhóm
2. Thay đổi ảnh nhóm
3. Thêm/xóa thành viên
4. Kiểm tra quyền chỉnh sửa
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Giao diện trực quan, dễ sử dụng
Bảng 2 14 Đặc tả chức năng – Sửa nhóm chat

2.3.14 Đặc tả chức năng – Xóa nhóm chat
Mục	Mô tả
Use Case Name	Xóa nhóm chat
Descriptions	Cho phép người dùng xóa nhóm chat
Actor	Người dùng đã đăng nhập (quản trị viên nhóm)
Priority	Thấp
Trigger	Người dùng nhấn nút "Xóa nhóm" trong thông tin nhóm
Pre-conditions	1. Người dùng đã đăng nhập vào hệ thống
2. Người dùng là quản trị viên của nhóm chat
Post-conditions	Nhóm chat được xóa khỏi hệ thống
Basic Flow	1. Người dùng truy cập vào nhóm chat
2. Người dùng chọn "Thông tin nhóm"
3. Người dùng chọn "Xóa nhóm"
4. Hệ thống hiển thị hộp thoại xác nhận
5. Người dùng xác nhận xóa
6. Hệ thống xóa nhóm chat
7. Hệ thống chuyển hướng về màn hình danh sách chat
Alternative Flow	1. Người dùng hủy xóa nhóm
Exception Flow	1. Lỗi kết nối: Hiển thị thông báo lỗi
2. Người dùng không có quyền xóa: Hiển thị thông báo lỗi
Functional Requirements	1. Xác nhận xóa nhóm
2. Xóa nhóm chat và dữ liệu liên quan (tin nhắn, media)
3. Kiểm tra quyền xóa
Non-Functional Requirements	1. Thời gian phản hồi < 2 giây
2. Giao diện trực quan, dễ sử dụng
Bảng 2 15 Đặc tả chức năng – Xóa nhóm chat

2.4 Biểu đồ Ca sử dụng (Use Case Diagram).
2.4.1 Biểu đồ Use Case – Tổng quát
 
Hình 2 1 Biểu đồ Usecase – Tổng quát
2.4.2 Biểu đồ Use Case – Chức năng Đăng ký  
 
Hình 2 2 Biểu đồ Use Case – Chức năng Đăng ký
2.4.3 Biểu đồ Use Case – Chức năng Đăng nhập  
 
Hình 2 3 Biểu đồ Use Case – Chức năng Đăng nhập
2.4.4 Biểu đồ Use Case – Chức năng Nhắn tin  
 
Hình 2 4 Biểu đồ Use Case – Chức năng Nhắn tin
2.4.5 Biểu đồ Use Case – Chức năng Xem thông báo  
 
Hình 2 5 Biểu đồ Use Case – Chức năng Xem thông báo
2.4.6 Biểu đồ Use Case – Chức năng Quản lý thông tin cá nhân  
 
Hình 2 6 Biểu đồ Use Case – Chức năng Quản lý thông tin cá nhân
2.4.7 Biểu đồ Use Case – Chức năng Thêm bài viết  
 
Hình 2 7 Biểu đồ Use Case – Chức năng Thêm bài viết

2.4.8 Biểu đồ Use Case – Chức năng Chỉnh sửa bài viết  
 
Hình 2 8 Biểu đồ Use Case – Chức năng Chỉnh sửa bài viết

2.4.9 Biểu đồ Use Case – Chức năng Xóa bài viết  
 
Hình 2 9 Biểu đồ Use Case – Chức năng Xóa bài viết
2.4.10 Biểu đồ Use Case – Chức năng Kết bạn  
 
Hình 2 10 Biểu đồ Use Case – Chức năng Kết bạn\

2.4.11 Biểu đồ Use Case – Chức năng Đồng ý kết bạn  
 
Hình 2 11 Biểu đồ Use Case – Chức năng Đồng ý kết bạn

2.4.12 Biểu đồ Use Case – Chức năng Xóa bạn bè  
 
Hình 2 12 Biểu đồ Use Case – Chức năng Xóa bạn bè

2.4.13 Biểu đồ Use Case – Chức năng Tạo nhóm chat  
 
Hình 2 13 Biểu đồ Use Case – Chức năng Tạo nhóm chat

2.4.14 Biểu đồ Use Case – Chức năng Sửa nhóm chat  
 
Hình 2 14 Biểu đồ Use Case – Chức năng Sửa nhóm chat
2.4.15 Biểu đồ Use Case – Chức năng Xóa nhóm chat  
 
Hình 2 15 Biểu đồ Use Case – Chức năng Xóa nhóm chat
2.5 Sơ đồ tuần tự (Sequence Diagram).
2.5.1 Biểu đồ Tuần tự – Chức năng Đăng ký
 
Hình 2 16 Biểu đồ tuần tự – Chức năng Đăng ký


2.5.2 Biểu đồ Tuần tự – Chức năng Đăng nhập
 
Hình 2 17 Biểu đồ tuần tự – Chức năng Đăng nhập



2.5.3 Biểu đồ Tuần tự – Chức năng Nhắn tin
 
Hình 2 18 Biểu đồ tuần tự – Chức năng Nhắn tin


2.5.4 Biểu đồ tuần tự – Chức năng Xem thông báo
 
Hình 2 19 Biểu đồ tuần tự – Chức năng Xem thông báo


2.5.5 Biểu đồ tuần tự – Chức năng Quản lý thông tin cá nhân
 
Hình 2 20 Biểu đồ tuần tự – Chức năng Quản lý thông tin cá nhân


2.5.6 Biểu đồ tuần tự – Chức năng Thêm bài viết
 
Hình 2 21 Biểu đồ tuần tự – Chức năng Thêm bài viết



2.5.7 Biểu đồ tuần tự – Chức năng Chỉnh sửa bài viết
 
Hình 2 22 Biểu đồ tuần tự – Chức năng Chỉnh sửa bài viết



2.5.8 Biểu đồ tuần tự – Chức năng Xóa bài viết
 
Hình 2 23 Biểu đồ tuần tự – Chức năng Xóa bài viết


2.5.9 Biểu đồ tuần tự – Chức năng Kết bạn
 
Hình 2 24 Biểu đồ tuần tự – Chức năng Kết bạn


2.5.10 Biểu đồ tuần tự – Chức năng Đồng ý kết bạn
 
Hình 2 25 Biểu đồ tuần tự – Chức năng Đồng ý kết bạn


2.5.11 Biểu đồ tuần tự – Chức năng Xóa bạn bè
 
Hình 2 26 Biểu đồ tuần tự – Chức năng Xóa bạn bè


2.5.12 Biểu đồ tuần tự – Chức năng Tạo nhóm chat
 
Hình 2 27 Biểu đồ tuần tự – Chức năng Tạo nhóm chat



2.5.13 Biểu đồ tuần tự – Chức năng Sửa nhóm chat
 
Hình 2 28 Biểu đồ tuần tự – Chức năng Sửa nhóm chat


2.5.14 Biểu đồ tuần tự – Chức năng Xóa nhóm chat
 
2.6 Biểu đồ hoạt động (Activity Diagram)
2.6.1 Biểu đồ Hoạt động – Chức năng Đăng ký
 
Hình 2 29 Biểu đồ hoạt động – Chức năng Đăng ký
2.6.2 Biểu đồ Hoạt động – Chức năng Đăng nhập
 
Hình 2 30 Biểu đồ Hoạt động – Chức năng Đăng nhập
2.6.3 Biểu đồ Hoạt động – Chức năng Nhắn tin
 
Hình 2 31 Biểu đồ Hoạt động – Chức năng Nhắn tin
2.6.4 Biểu đồ Hoạt động – Chức năng Xem thông báo
 
Hình 2 32 Biểu đồ Hoạt động – Chức năng Xem thông báo
2.6.5 Biểu đồ Hoạt động – Chức năng Quản lý thông tin cá nhân
 
Hình 2 33 Biểu đồ Hoạt động – Chức năng Quản lý thông tin cá nhân
2.6.6 Biểu đồ Hoạt động – Chức năng Thêm bài viết
 
Hình 2 34 Biểu đồ Hoạt động – Chức năng Thêm bài viết
2.6.7 Biểu đồ Hoạt động – Chức năng Chỉnh sửa bài viết
 
Hình 2 35 Biểu đồ Hoạt động – Chức năng Chỉnh sửa bài viết
2.6.8 Biểu đồ Hoạt động – Chức năng Xóa bài viết
 
Hình 2 36 Biểu đồ Hoạt động – Chức năng Xóa bài viết

2.6.9 Biểu đồ Hoạt động – Chức năng Kết bạn
 
Hình 2 37 Biểu đồ Hoạt động – Chức năng Kết bạn
2.6.10 Biểu đồ Hoạt động – Chức năng Đồng ý kết bạn
 
Hình 2 38 Biểu đồ Hoạt động – Chức năng Đồng ý kết bạn
2.6.11 Biểu đồ Hoạt động – Chức năng Xóa bạn bè
 
Hình 2 39 Biểu đồ Hoạt động – Chức năng Xóa bạn bè
2.6.12 Biểu đồ Hoạt động – Chức năng Tạo nhóm chat
 
Hình 2 40 Biểu đồ Hoạt động – Chức năng Tạo nhóm chat
2.6.13 Biểu đồ Hoạt động – Chức năng Sửa nhóm chat
 
Hình 2 41 Biểu đồ Hoạt động – Chức năng Sửa nhóm chat
2.6.14 Biểu đồ Hoạt động – Chức năng Xóa nhóm chat
 
Hình 2 42 Biểu đồ Hoạt động – Chức năng Xóa nhóm chat

2.7 Thiết kế cơ sở dữ liệu
2.7.1 Bảng Cơ Sở Dữ Liệu - Người Dùng

STT	Tên bảng	Tên cột	Kiểu	Mục đích
1	User	Uid	String	Định danh duy nhất cho người dùng
2	User	Email	String	Địa chỉ email của người dùng
3	User	FullName	String	Họ tên đầy đủ của người dùng
4	User	Gender	String	Giới tính của người dùng
5	User	BirthDay	DateTime	Ngày sinh của người dùng
6	User	PhoneNumber	String	Số điện thoại của người dùng
7	User	Address	String	Địa chỉ của người dùng
8	User	ProfileImage	String	URL ảnh đại diện của người dùng
9	User	Decs	String	Mô tả hoặc tiểu sử của người dùng
10	User	Token	String	Mã xác thực
11	User	LastSeen	DateTime	Thời gian cuối cùng người dùng trực tuyến
12	User	CreatedAt	DateTime	Thời gian tạo tài khoản
13	User	IsOnline	Boolean	Trạng thái trực tuyến của người dùng
Bảng 2 16 Bảng cơ sở dữ liệu người dùng
2.7.2 Bảng Cơ Sở Dữ Liệu - Bạn bè

STT	Tên bảng	Tên cột	Kiểu	Mục đích
1	Friendship	FriendshipId	String	Định danh duy nhất cho mối quan hệ bạn bè
2	Friendship	SenderId	String	Định danh của người gửi yêu cầu kết bạn
3	Friendship	ReceiverId	String	Định danh của người nhận yêu cầu kết bạn
4	Friendship	IsAccepted	Boolean	Trạng thái chấp nhận yêu cầu kết bạn
5	Friendship	CreatedAt	DateTime	Thời gian tạo yêu cầu kết bạn
Bảng 2 17 Bảng cơ sở dữ liệu Quản lý bạn bè

2.7.3 Bảng Cơ Sở Dữ Liệu  Like
STT	Tên bảng	Tên cột	Kiểu	Mục đích
1	Like	LikeId	String	ID của lượt thích
2	Like	ContentId	String	ID của nội dung được thích 
3	Like	String	String	Loại nội dung được thích 
4	Like	UserId	String	ID của người đã thích
5	Like	CreatedAt	DateTime	Thời gian tạo lượt thích
Bảng 2 18 Bảng cơ sở dữ liệu Quản lý chức năng Like
2.7.4 Bảng Cơ Sở Dữ Liệu - Thông báo

STT	Tên bảng	Tên cột	Kiểu	Mục đích
1	Notification	Id	String	Định danh duy nhất cho thông báo
2	Notification	SenderId	String	ID của người gửi thông báo
3	Notification	ReceiverId	String	ID của người nhận thông báo
4	Notification	SenderName	String	Tên người gửi thông báo
5	Notification	SenderAvatar	String	Url ảnh đại diện người gửi thông báo
6	Notification	Content	String	Nội dung của thông báo
7	Notification	Type	String	Loại thông báo
8	Notification	PostId	String	ID bài viết
9	Notification	CommentId	String	ID bình luận
10	Notification	ChatId	String	ID cuộc trò chuyện
11	Notification	IsRead	Boolean	Trạng thái đã đọc thông báo hay chưa
12	Notification	CreatedAt	DateTime	Thời gian tạo thông báo
Bảng 2 19Bảng cơ sở dữ liệu Quản lý thông báo
2.7.5 Bảng Cơ Sở Dữ Liệu - Bình luận
STT	Tên bảng	Tên cột	Kiểu	Mục đích
1	Comment	CommentId	String	ID bình luận
2	Comment	PostId	String	ID bài viết được bình luận
3	Comment	UserId	String	ID người bình luận
4	Comment	Content	String	Nội dung bình luận
5	Comment	LikeCount	Int	Số lượt thích của bình luận
6	Comment	CreatedAt	DateTime	Thời gian tạo bình luận
7	Comment	ParentId	String	ID của comment cha 
Bảng 2 20 Bảng cơ sở dữ liệu Quản lý bình luận
2.7.6 Bảng Cơ Sở Dữ Liệu -  Bài viết

 
STT	Tên bảng	Tên cột	Kiểu	Mục đích
1	Post	PostId	String	ID bài viết
2	Post	UserId	String	Người đăng bài
3	Post	Content	String	Nội dung văn bản
4	Post	FileUrls	List<String>	Danh sách hình ảnh hoặc video
5	Post	ThumbnailUrl	String	Ảnh đại diện nếu là video
6	Post	PostType	PostType	Loại bài đăng (text/image/video)
7	Post	CreatedAt	DateTime	Ngày tạo bài viết
8	Post	UpdatedAt	DateTime	Ngày cập nhật bài viết
9	Post	LikeCount	Int	Số lượt thích
10	Post	CommentCount	Int	Số bình luận
Bảng 2 21Bảng cơ sở dữ liệu Quản lý bài viết

2.7.7 Bảng Cơ Sở Dữ Liệu -  Tin nhắn
STT	Tên bảng	Tên cột	Kiểu	Mục đích
1	Message	Id	String	ID duy nhất của tin nhắn
2	Message	ChatId	String	ID của phòng chat chứa tin nhắn này
3	Message	SenderId	String	ID của người gửi tin nhắn
4	Message	SenderName	String?	Tên hiển thị của người gửi
5	Message	SenderAvatar	String?	URL ảnh đại diện của người gửi
6	Message	Content	String	Nội dung của tin nhắn
7	Message	Type	MessageType	Loại tin nhắn (văn bản/hình ảnh/video/file/...)
8	Message	MediaUrl	String?	URL của media đính kèm (nếu có)
9	Message	SeenBy	Set<String>	Danh sách ID người dùng đã xem tin nhắn
10	Message	CreatedAt	DateTime	Thời điểm tin nhắn được tạo
Bảng 2 22 Bảng cơ sỏ dữ liệu Quản lý tin nhắn
2.7.8 Bảng Cơ Sở Dữ Liệu – Cuộc trò truyện
STT	Tên bảng	Tên cột	Kiểu	Mục tiêu
1	Chats	Id	String	Định danh duy nhất của phòng chat
2	Chats	Name	String	Tên của phòng chat (đối với chat nhóm) hoặc tên người dùng (đối với chat 1-1)
3	Chats	Avatar	String	Url ảnh đại diện của phòng chat hoặc người dùng
4	Chats	Isgroup	Bool	Xác định đây là chat nhóm (true) hay chat 1-1 (false)
5	Chats	Ispublic	Bool	Xác định phòng chat là công khai (true) hay riêng tư (false)
6	Chats	Members	List<string>	Danh sách id của các thành viên trong phòng chat
7	Chats	Admins	List<string>	Danh sách id của các admin trong phòng chat
8	Chats	Lastmessageid	String	Id của tin nhắn cuối cùng trong phòng chat
9	Chats	Lastmessage	String	Nội dung của tin nhắn cuối cùng
10	Chats	Lastmessagetype	String	Loại của tin nhắn cuối cùng (văn bản/hình ảnh/video/...)
11	Chats	Lastmessagesenderid	String	Id của người gửi tin nhắn cuối cùng
12	Chats	Updatedat	Timestamp	Thời điểm phòng chat được cập nhật lần cuối
13	Chats	Createdby	String	Id của người tạo phòng chat
14	Chats	Createdat	Timestamp	Thời điểm phòng chat được tạo
Bảng 2 23 Bảng cơ sở dữ liệu Quản lí cuộc trò truyện

 
CHƯƠNG 3: KẾT QUẢ CÀI ĐẶT, THỬ NGHIỆM HOẶC KẾT QUẢ NGHIÊN CỨU
3.1 Mô tả môi trường phát triển và triển khai
Hệ thống mạng xã hội được phát triển trong môi trường Flutter với sự hỗ trợ của Firebase làm backend. Việc phát triển và thử nghiệm diễn ra trên các nền tảng sau:
•	Hệ điều hành: Windows 11, macOS Ventura.
•	Ngôn ngữ lập trình: Dart (Flutter framework).
•	Backend: Firebase (Authentication, Firestore, Storage, Cloud Functions).
•	Công cụ phát triển: Android Studio, VS Code, Xcode.
•	Thiết bị thử nghiệm: Điện thoại Android (Google Pixel 3XL), , trình giả lập trên máy tính.
•	Hệ thống kiểm soát phiên bản: Git, GitHub.
•	Môi trường triển khai: Firebase Hosting cho web, Google Play Store và Apple App Store cho ứng dụng di động.

3.2 Cài đặt và cấu hình hệ thống
1.	Quá trình cài đặt và triển khai hệ thống bao gồm các bước:
2.	Cài đặt Flutter và môi trường phát triển: Cấu hình SDK Flutter, cài đặt Android Studio và VS Code.
3.	Cấu hình Firebase: Kết nối Firebase với ứng dụng, thiết lập Authentication, Firestore, Storage, Cloud Messaging.
4.	Tích hợp thư viện: Cài đặt các thư viện quan trọng như flutter_riverpod, firebase_core, cloud_firestore, firebase_auth, cached_network_image, chewie.
5.	Cấu hình môi trường thử nghiệm: Tạo project trên Firebase, thêm thông tin ứng dụng cho Android, iOS, và web.
6.	Triển khai ứng dụng thử nghiệm: Sử dụng Firebase App Distribution để phân phối bản thử nghiệm

3.3 Mô tả chi tiết các chức năng đã thực hiện
STT	Chức năng	Mức độ hoàn thiện	Ý nghĩa
1	Đăng ký, đăng nhập bằng email, 	Hoàn thiện	Cho phép người dùng đăng ký và đăng nhập vào ứng dụng 
2	Cập nhật thông tin cá nhân, ảnh đại diện	Hoàn thiện	Người dùng có thể cập nhật thông tin cá nhân và ảnh đại diện của mình.
3	Đổi mật khẩu, đặt lại mật khẩu khi quên	Hoàn thiện	Người dùng có thể đổi mật khẩu hoặc đặt lại mật khẩu khi quên.
4	Tạo bài viết với nội dung văn bản, hình ảnh, video	Hoàn thiện	Người dùng có thể tạo bài viết với nhiều loại nội dung khác nhau.
5	Chỉnh sửa, xóa bài viết	Hoàn thiện	Người dùng có thể chỉnh sửa hoặc xóa bài viết của mình.
6	Hiển thị danh sách bài viết theo thời gian thực	Hoàn thiện	Danh sách bài viết được hiển thị theo thời gian thực.
7	Người dùng có thể bình luận dưới bài viết	Hoàn thiện	Người dùng có thể bình luận dưới các bài viết.
8	Thả yêu thích vào bài viết	Hoàn thiện	Người dùng có thể thả yêu thích vào các bài viết.
9	Xóa bình luận, đếm số lượt thích	Hoàn thiện	Người dùng có thể xóa bình luận và hệ thống đếm số lượt thích.
10	Hỗ trợ tải lên video từ thiết bị	Hoàn thiện	Người dùng có thể tải lên video từ thiết bị của mình.
11	Phát video với cơ chế tự động phát khi cuộn đến	Hoàn thiện	Video tự động phát khi người dùng cuộn đến.
12	Dừng phát video khi rời khỏi màn hình	Hoàn thiện	Video dừng phát khi người dùng rời khỏi màn hình.
13	Gửi tin nhắn văn bản, hình ảnh, video	Hoàn thiện	Người dùng có thể gửi tin nhắn văn bản, hình ảnh và video.
14	Hiển thị danh sách tin nhắn gần đây	Hoàn thiện	Danh sách tin nhắn gần đây được hiển thị cho người dùng.
15	Hỗ trợ gửi tin nhắn theo thời gian thực	Hoàn thiện	Tin nhắn được gửi theo thời gian thực.
16	Gửi lời mời kết bạn	Hoàn thiện	Người dùng có thể gửi lời mời kết bạn.
17	Chấp nhận hoặc từ chối lời mời kết bạn	Hoàn thiện	Người dùng có thể chấp nhận hoặc từ chối lời mời kết bạn.
18	Hủy kết bạn, xem danh sách bạn bè	Hoàn thiện	Người dùng có thể hủy kết bạn và xem danh sách bạn bè của mình.
19	Hệ thống gửi thông báo khi có tương tác mới	Hoàn thiện	Hệ thống gửi thông báo cho người dùng khi có tương tác mới.
20	Thông báo về tin nhắn mới	Hoàn thiện	Hệ thống gửi thông báo cho người dùng về tin nhắn mới.
21	Thông báo về yêu cầu kết bạn	Hoàn thiện	Hệ thống gửi thông báo cho người dùng về yêu cầu kết bạn mới.
22	Quản lý nội dung bài viết vi phạm	Hoàn thiện	Quản trị viên có thể quản lý nội dung bài viết vi phạm chính sách.
23	Kiểm soát các hành vi vi phạm chính sách	Hoàn thiện	Quản trị viên kiểm soát các hành vi vi phạm chính sách của người dùng.


3.4 Giao diện và luồng hoạt động của hệ thống
3.4.1  Xác thực và Quản lý Người dùng
A.	Đăng ký tài khoản
 
Hình 3 1 Giao diện màn hình Đăng ký tài khoản
1. Người dùng nhập email, mật khẩu và xác nhận mật khẩu
2. Hệ thống kiểm tra tính hợp lệ của dữ liệu đầu vào
3. Firebase Authentication tạo tài khoản người dùng mới
4. Hệ thống tạo document người dùng trong Firestore với thông tin cơ bản
5. Hệ thống gửi email xác minh đến địa chỉ email đã đăng ký
6. Người dùng được chuyển đến màn hình xác minh email

B.	 Xác minh email
 
Hình 3 2Giao diện màn hình xác nhận Email
1. Người dùng nhận email xác minh và nhấp vào liên kết
2. Firebase Authentication cập nhật trạng thái xác minh email
3. Khi người dùng quay lại ứng dụng, hệ thống kiểm tra trạng thái xác minh
4. Nếu đã xác minh, người dùng được chuyển đến màn hình nhập thông tin cá nhân
5. Nếu chưa xác minh, người dùng có thể yêu cầu gửi lại email xác minh

C.	 Nhập thông tin cá nhân
 
Hình 3 3Giao diện màn hình Nhập thông tin cá nhân
1. Người dùng nhập thông tin cá nhân (họ tên, ngày sinh, giới tính, số điện thoại)
2. Hệ thống kiểm tra tính hợp lệ của dữ liệu
3. Người dùng có thể tải lên ảnh đại diện
4. Hệ thống lưu thông tin vào Firestore và ảnh đại diện vào Firebase Storage
5. Người dùng được chuyển đến màn hình chính của ứng dụng
D.	  Đăng nhập
 
Hình 3 4Giao diện màn hình Đăng nhập
1. Người dùng nhập email và mật khẩu
2. Firebase Authentication xác thực thông tin đăng nhập
3. Hệ thống kiểm tra trạng thái xác minh email
4. Hệ thống kiểm tra tính đầy đủ của thông tin cá nhân
5. Hệ thống cập nhật token FCM và trạng thái online
6. Người dùng được chuyển đến màn hình chính hoặc màn hình phù hợp với trạng thái tài khoản

E.	  Đăng xuất
1. Người dùng chọn đăng xuất từ menu
2. Hệ thống cập nhật trạng thái offline và thời gian hoạt động cuối
3. Hệ thống xóa token FCM khỏi Firestore
4. Firebase Authentication đăng xuất người dùng
5. Người dùng được chuyển đến màn hình đăng nhập

3.4.2  Trang chủ và Bài viết
A.	 Hiển thị bài viết
 
Hình 3 5Giao diện màn hình Bài viết
1. Hệ thống truy vấn Firestore để lấy bài viết từ người dùng đang theo dõi
2. Hệ thống sắp xếp bài viết theo thời gian tạo (mới nhất lên đầu)
3. Hệ thống tải thông tin người đăng và số lượng tương tác cho mỗi bài viết
4. Hệ thống hiển thị bài viết dưới dạng danh sách cuộn vô hạn
5. Khi người dùng cuộn đến cuối danh sách, hệ thống tải thêm bài viết

B.	 Hiển thị video
 
Hình 3 6Giao diện màn hình Video
1. Hệ thống truy vấn Firestore để lấy bài viết có loại là video
2. Hệ thống tải thông tin người đăng và số lượng tương tác cho mỗi video
3. Hệ thống hiển thị video dưới dạng danh sách cuộn dọc (kiểu TikTok)
4. Video tự động phát khi hiển thị trên màn hình và tạm dừng khi không còn hiển thị
5. Khi người dùng cuộn đến video cuối, hệ thống tải thêm video

C.	 Tương tác với bài viết
 
Hình 3 7Giao diện màn Hình tương tác với bài viết (hình ảnh)

1. Người dùng có thể thích bài viết bằng cách nhấn nút thích
2. Hệ thống cập nhật trạng thái thích trong Firestore và cập nhật số lượng thích
3. Người dùng có thể bình luận bằng cách nhấn vào phần bình luận
4. Hệ thống hiển thị danh sách bình luận và cho phép thêm bình luận mới
5. Người dùng có thể chia sẻ bài viết bằng cách nhấn nút chia sẻ

3.4.3 Đăng bài và Quản lý Nội dung
A.	 Tạo bài viết mới
 
Hình 3 8Giao diện màn hình tạo bài viết

1. Người dùng chọn tạo bài viết mới từ màn hình chính
2. Người dùng nhập nội dung văn bản cho bài viết
3. Người dùng có thể thêm hình ảnh hoặc video (tối đa 10 file)
4. Nếu là video, hệ thống tạo thumbnail tự động
5. Khi nhấn đăng, hệ thống tải file lên Firebase Storage
6. Hệ thống tạo document bài viết mới trong Firestore với các thông tin liên quan
7. Hệ thống cập nhật feed của người theo dõi
B.	 Chỉnh sửa bài viết
 
	 
Hình 3 9Giao diện màn hình chỉnh sửa bài viết

1. Người dùng chọn tùy chọn chỉnh sửa từ menu của bài viết
2. Hệ thống hiển thị form chỉnh sửa với nội dung hiện tại
3. Người dùng thay đổi nội dung văn bản (không thể thay đổi media)
4. Khi nhấn cập nhật, hệ thống cập nhật document bài viết trong Firestore
5. Hệ thống cập nhật thời gian chỉnh sửa và đánh dấu bài viết đã được chỉnh sửa
C.	 Xóa bài viết
1. Người dùng chọn tùy chọn xóa từ menu của bài viết
2. Hệ thống hiển thị hộp thoại xác nhận
3. Khi xác nhận, hệ thống xóa document bài viết từ Firestore
4. Hệ thống xóa các file media liên quan từ Firebase Storage
5. Hệ thống xóa tất cả bình luận và lượt thích liên quan đến bài viết
D.	 Báo cáo bài viết
1. Người dùng chọn tùy chọn báo cáo từ menu của bài viết
2. Hệ thống hiển thị form báo cáo với các lý do
3. Người dùng chọn lý do và thêm mô tả (tùy chọn)
4. Hệ thống tạo document báo cáo mới trong Firestore
5. Quản trị viên sẽ xem xét báo cáo và thực hiện hành động phù hợp
3.4.4  Hệ thống Nhắn tin
A.	 Danh sách cuộc trò chuyện
 
Hình 3 10Giao diện màn hình Danh sách cuộc trò truyện

1. Hệ thống truy vấn Firestore để lấy tất cả cuộc trò chuyện của người dùng
2. Hệ thống sắp xếp cuộc trò chuyện theo thời gian tin nhắn mới nhất
3. Hệ thống hiển thị thông tin cơ bản: ảnh đại diện, tên, tin nhắn cuối, thời gian
4. Hệ thống đánh dấu cuộc trò chuyện có tin nhắn chưa đọc
5. Hệ thống lắng nghe sự thay đổi trong thời gian thực để cập nhật danh sách
B.	 Tạo cuộc trò chuyện mới
1. Người dùng chọn tạo cuộc trò chuyện mới từ màn hình danh sách
2. Hệ thống hiển thị danh sách bạn bè để chọn
3. Người dùng chọn một hoặc nhiều người để tạo cuộc trò chuyện
4. Hệ thống kiểm tra xem cuộc trò chuyện đã tồn tại chưa
5. Nếu chưa, hệ thống tạo document cuộc trò chuyện mới trong Firestore
6. Người dùng được chuyển đến màn hình chat
C.	 Tạo nhóm chat
 
Hình 3 11Giao diện màn hình Tạo nhóm chat

1. Người dùng chọn tạo nhóm chat từ màn hình danh sách
2. Người dùng nhập tên nhóm và chọn ảnh nhóm (tùy chọn)
3. Người dùng chọn các thành viên từ danh sách bạn bè
4. Hệ thống tạo document nhóm chat mới trong Firestore
5. Hệ thống tải ảnh nhóm lên Firebase Storage (nếu có)
6. Người dùng được chuyển đến màn hình chat nhóm
D.	 Gửi và nhận tin nhắn
 
Hình 3 12Giao diện màn hình Gửi và nhận tin nhắn
1. Hệ thống truy vấn Firestore để lấy lịch sử tin nhắn của cuộc trò chuyện
2. Hệ thống hiển thị tin nhắn theo thứ tự thời gian
3. Người dùng nhập tin nhắn mới và nhấn gửi
4. Hệ thống tạo document tin nhắn mới trong Firestore
5. Hệ thống cập nhật thông tin cuộc trò chuyện (tin nhắn cuối, thời gian)
6. Hệ thống gửi thông báo đẩy đến các thành viên khác trong cuộc trò chuyện
7. Các thành viên khác nhận được tin nhắn trong thời gian thực thông qua Firestore listeners
E.	  Gửi file media trong chat
1. Người dùng chọn tùy chọn đính kèm file
2. Người dùng chọn hình ảnh hoặc video từ thư viện hoặc chụp mới
3. Hệ thống tải file lên Firebase Storage
4. Hệ thống tạo document tin nhắn mới với URL của file
5. Hệ thống hiển thị hình ảnh hoặc video trong cuộc trò chuyện
6. Người nhận có thể xem trước hoặc tải xuống file
F.	 Quản lý nhóm chat
1. Người dùng chọn xem thông tin nhóm từ màn hình chat
2. Hệ thống hiển thị thông tin nhóm và danh sách thành viên
3. Người tạo nhóm có thể thêm/xóa thành viên, đổi tên nhóm, đổi ảnh nhóm
4. Thành viên có thể rời nhóm
5. Hệ thống cập nhật thông tin nhóm trong Firestore
3.4.5  Chức năng Quản lý bạn bè

A.	 Tìm kiếm người dùng
 
Hình 3 13Giao diện màn hình Tìm kiếm người dùng

1. Người dùng nhập từ khóa tìm kiếm (tên, email)
2. Hệ thống truy vấn Firestore để tìm người dùng phù hợp
3. Hệ thống hiển thị kết quả tìm kiếm với thông tin cơ bản
4. Người dùng có thể xem hồ sơ của người dùng khác từ kết quả tìm kiếm

B.	 Gửi lời mời kết bạn
 
Hình 3 14Giao diện màn hình Gửi lời mời kết bạn
1. Người dùng chọn gửi lời mời kết bạn từ hồ sơ người dùng khác
2. Hệ thống tạo document lời mời kết bạn trong Firestore
3. Hệ thống gửi thông báo đẩy đến người nhận
4. Trạng thái nút kết bạn thay đổi thành "Hủy lời mời"

C.	 Quản lý lời mời kết bạn
 
Hình 3 15Giao diện màn hình Quản lý lời mời kết bạn

1. Người dùng xem danh sách lời mời kết bạn từ màn hình thông báo
2. Hệ thống truy vấn Firestore để lấy tất cả lời mời kết bạn đến
3. Người dùng có thể chấp nhận hoặc từ chối lời mời
4. Khi chấp nhận, hệ thống tạo mối quan hệ bạn bè trong Firestore
5. Hệ thống xóa document lời mời kết bạn
6. Hệ thống gửi thông báo đến người gửi lời mời

D.	 Quản lý danh sách bạn bè
 
Hình 3 16Giao diện màn hình  Quản lý danh sách bạn bè

1. Người dùng xem danh sách bạn bè từ màn hình bạn bè
2. Hệ thống truy vấn Firestore để lấy tất cả mối quan hệ bạn bè
3. Hệ thống hiển thị danh sách bạn bè với thông tin cơ bản và trạng thái online
4. Người dùng có thể hủy kết bạn hoặc chặn người dùng khác
5. Khi hủy kết bạn, hệ thống xóa mối quan hệ bạn bè từ Firestore
3.4.6  Hệ thống Thông báo
A.	 Thông báo trong ứng dụng
 
Hình 3 17Giao diện màn hình thông báo trong ứng dụng

1. Hệ thống truy vấn Firestore để lấy tất cả thông báo của người dùng
2. Hệ thống sắp xếp thông báo theo thời gian (mới nhất lên đầu)
3. Hệ thống hiển thị thông báo với thông tin: loại, nội dung, thời gian
4. Hệ thống đánh dấu thông báo chưa đọc
5. Khi người dùng nhấn vào thông báo, hệ thống chuyển đến nội dung liên quan
6. Hệ thống đánh dấu thông báo đã đọc

B.	 Thông báo đẩy
1. Khi có sự kiện mới (tin nhắn, lời mời kết bạn, thích, bình luận), hệ thống tạo thông báo
2. Hệ thống lưu thông báo vào Firestore
3. Cloud Functions gửi thông báo đẩy đến thiết bị của người dùng thông qua FCM
4. Người dùng nhận được thông báo ngay cả khi không mở ứng dụng
5. Khi nhấn vào thông báo, ứng dụng mở và chuyển đến nội dung liên quan
3.4.7  Hồ sơ Người dùng
A.	 Xem hồ sơ cá nhân
 
Hình 3 18Giao diện màn hình xem hồ sơ cá nhân

1. Người dùng truy cập hồ sơ cá nhân từ menu
2. Hệ thống truy vấn Firestore để lấy thông tin người dùng
3. Hệ thống truy vấn Firestore để lấy bài viết của người dùng
4. Hệ thống hiển thị thông tin cá nhân, số liệu thống kê và danh sách bài viết
5. Người dùng có thể chuyển đổi giữa chế độ xem lưới và danh sách
B.	 Xem hồ sơ người dùng khác
 
Hình 3 19Giao diện màn hình Xem hồ sơ người dùng khác

1. Người dùng truy cập hồ sơ người dùng khác từ bài viết, bình luận hoặc tìm kiếm
2. Hệ thống kiểm tra mối quan hệ giữa hai người dùng
3. Hệ thống kiểm tra cài đặt quyền riêng tư của người dùng được xem
4. Hệ thống hiển thị thông tin và bài viết dựa trên quyền riêng tư
5. Người dùng có thể thực hiện các hành động: kết bạn, theo dõi, nhắn tin
C.	 Chỉnh sửa hồ sơ
 
Hình 3 20Giao diện màn hình Chỉnh sửa hồ sơ

1. Người dùng chọn chỉnh sửa hồ sơ từ hồ sơ cá nhân
2. Hệ thống hiển thị form chỉnh sửa với thông tin hiện tại
3. Người dùng có thể thay đổi: ảnh đại diện, tên, mô tả, thông tin cá nhân
4. Khi lưu, hệ thống cập nhật thông tin trong Firestore
5. Hệ thống tải ảnh đại diện mới lên Firebase Storage (nếu thay đổi)
3.4.8  Cài đặt Ứng dụng
A.	 Cài đặt ngôn ngữ
 
Hình 3 21Giao diện màn hình Cài đặt ngôn ngữ

1. Người dùng truy cập cài đặt ngôn ngữ từ menu cài đặt
2. Hệ thống hiển thị danh sách ngôn ngữ được hỗ trợ
3. Người dùng chọn ngôn ngữ mong muốn
4. Hệ thống lưu cài đặt ngôn ngữ vào SharedPreferences
5. Hệ thống áp dụng ngôn ngữ mới ngay lập tức
B.	 Cài đặt giao diện
 	 
Hình 3 22Giao diện màn hình Cài đặt giao diện

1. Người dùng truy cập cài đặt giao diện từ menu cài đặt
2. Người dùng có thể chọn chế độ sáng, tối hoặc theo hệ thống
3. Hệ thống lưu cài đặt giao diện vào SharedPreferences
4. Hệ thống áp dụng giao diện mới ngay lập tức
3.4.9   Luồng Dữ liệu và Đồng bộ hóa

A.	  Đồng bộ hóa dữ liệu
1. Ứng dụng sử dụng Firestore listeners để lắng nghe thay đổi trong thời gian thực
2. Khi có thay đổi từ server, hệ thống cập nhật UI tự động
3. Hệ thống sử dụng caching để giảm thiểu truy vấn và cải thiện hiệu suất
4. Hệ thống kiểm tra kết nối internet và xử lý trường hợp offline
5. Khi kết nối lại, hệ thống đồng bộ hóa các thay đổi offline với server
B.	Quản lý trạng thái
1. Ứng dụng sử dụng Riverpod để quản lý trạng thái toàn cục
2. Mỗi tính năng có các provider riêng để quản lý trạng thái
3. Hệ thống sử dụng repository pattern để tách biệt logic nghiệp vụ và nguồn dữ liệu
4. Hệ thống sử dụng state notifier để quản lý trạng thái phức tạp
5. UI được cập nhật tự động khi trạng thái thay đổi thông qua Consumer widgets
C.	 Xử lý lỗi và khôi phục
1. Hệ thống bắt và xử lý các ngoại lệ trong quá trình tương tác với Firebase
2. Hệ thống hiển thị thông báo lỗi phù hợp cho người dùng
3. Hệ thống tự động thử lại các hoạt động mạng khi gặp lỗi tạm thời
4. Hệ thống lưu trữ dữ liệu quan trọng cục bộ để khôi phục khi cần
5. Hệ thống ghi log lỗi để phân tích và cải thiện 
3.5 Đánh giá hiệu năng hệ thống
Sau quá trình phát triển và kiểm thử, hệ thống đã thể hiện hiệu năng ấn tượng trên nhiều khía cạnh. Ứng dụng được xây dựng trên nền tảng Flutter với kiến trúc provider pattern hiện đại, kết hợp cùng Riverpod để quản lý state,tạo“nên một hệ thống mạnh mẽ và linh hoạt.Việcáp dụng các công nghệ tiên tiến này không chỉ đảm bảo hiệu suất mà còn tạo nền tảng vững chắc cho việc phát triển trong tương lai.
Về mặt quản lý tài nguyên, hệ thống thể hiện sự tối ưu đáng kể trong việc xử lý đa phương tiện. Đặc biệt trong việc phát video, ứng dụng áp dụng cơ chế phát thông minh, chỉ cho phép một video được phát tại một thời điểm, tự động dừng khi không trong tầm nhìn của người dùng. Điều này không chỉ tối ưu hóa việc sử dụng tài nguyên mà còn mang lại trải nghiệm mượt mà cho người dùng. Hệ thống cache được thiết kế tinh vi với CachedNetworkImage và CachedVideoPlayerPlus, giúp giảm thiểu đáng kể thời gian tải và lưu trữ dữ liệu. ”
Hiệu suất mạng của ứng dụng được tối ưu hóa thông qua việc áp dụng pagination và lazy loading.Hệ thống tự động tải dữ liệu theo từng trang khi người dùng cuộn, kết hợp với prefetching thông minh để đảm bảo trải nghiệm liền mạch. Đặc biệt, ứng dụng vẫn hoạt động hiệu quả trong điều kiện mạng yếu hoặc không có kết nối nhờ vào khả năng lưu trữ dữ liệu locally và đồng bộ hóa khi có mạng trở lại. “
Về mặt giao diện người dùng, ứng dụng đạt được hiệu suất cao với frame rate ổn định ở mức 60fps. Điều này đạt được nhờ việc tối ưu hóa Flutter widget tree, sử dụng const widget và các kỹ thuật tối ưu rebuild. Scroll performance đặc biệt mượt mà nhờ việc áp dụng virtual scrolling và recycling view items, giúp giảm thiểu việc sử dụng bộ nhớ không cần thiết.
Về khía cạnh lưu trữ và xử lý dữ liệu, việc tích hợp Firebase mang lại nhiều lợi ích đáng kể. Hệ thống hỗ trợ realtime updates, offline persistence và có khả năng tự động mở rộng theo nhu cầu. Các queries được tối ưu hóa thông qua việc sử dụng indexes và batch operations, đảm bảo thời gian phản hồi nhanh chóng cho người dùng.
Các metrics thu thập được cho thấy hiệu năng ấn tượng của hệ thống. Thời gian khởi động ứng dụng dưới 2 giây, memory usage được kiểm soát tốt với mức tiêu thụ idle dưới 100MB và active dưới 200MB. Network usage được tối ưu hóa thông qua việc nén ảnh và video streaming thích ứng, giúp tiết kiệm băng thông cho người dùng.
Về khả năng mở rộng, kiến trúc module hóa của hệ thống cho phép dễ dàng thêm mới tính năng mà không ảnh hưởng đến hiệu suất tổng thể. Code base được tổ chức tốt, tuân thủ các nguyên tắc clean code, tạo điều kiện thuận lợi cho việc bảo trì và phát triển trong tương lai.
Đặc biệt, hệ thống thể hiện sự ổn định và bảo mật cao với authentication flow an toàn và mã hóa dữ liệu nhạy cảm. Error handling được triển khai toàn diện với khả năng tự phục hồi và thông báo lỗi thân thiện với người dùng. Hiệu năng đồng đều trên các nền tảng iOS, Android và Web nhờ vào việc áp dụng adaptive UI/UX và các tối ưu hóa đặc thù cho từng platform.”
Tóm lại, hệ thống đã chứng minh được hiệu năng vượt trội với việc tối ưu hóa toàn diện từ frontend đến backend. Kiến trúc được thiết kế thông minh không chỉ đảm bảo hiệu suất cao mà còn tạo nền tảng vững chắc cho việc mở rộng quy mô trong tương lai.”Các chỉ số hiệu năng cho thấy ứng dụng đã đạt được sự cân bằng lý tưởng giữa hiệu suất và trải nghiệm người dùng, đáp ứng đầy đủ các yêu cầu đề ra của dự án.”
3.6 So sánh kết quả với mục tiêu ban đầu
Sau quá trình phát triển và triển khai, hệ thống đã đạt được toàn bộ các mục tiêu đề ra ban đầu. Về quản lý người dùng, ứng dụng đã tích hợp thành công hệ thống xác thực đa nền tảng thông qua Firebase Authentication, cho phép đăng nhập bằng email cùng với khả năng quản lý thông tin cá nhân toàn diện. Phần quản lý bài viết và tương tác được triển khai đầy đủ với khả năng chia sẻ nội dung đa phương tiện, hệ thống bình luận và reaction theo thời gian thực.
Đặc biệt trong việc xử lý video, ứng dụng thể hiện hiệu năng vượt trội với cơ chế tự động phát và dừng thông minh, tối ưu hóa tài nguyên hệ thống. Các tính năng xã hội như nhắn tin, quản lý bạn bè và hệ thống thông báo đều hoạt động hiệu quả, mang lại trải nghiệm người dùng mượt mà. Về mặt quản trị, hệ thống cung cấp đầy đủ công cụ để kiểm soát nội dung và hành vi người dùng, đảm bảo môi trường lành mạnh cho cộng đồng.
Nhìn chung, không chỉ đáp ứng đủ yêu cầu chức năng, hệ thống còn thể hiện sự vượt trội về hiệu năng và khả năng mở rộng, tạo nền tảng vững chắc cho việc phát triển trong tương lai.
 
KẾT LUẬN VÀ HƯỚNG PHÁT TRIỂN
1.	Kết quả đạt được
Dự án đã thành công trong việc xây dựng một nền tảng mạng xã hội hoàn chỉnh với đầy đủ tính năng cốt lõi.“Hệ thống thể hiện hiệu năng ổn định với khả năng xử lý đa phương tiện tốt, đặc biệt trong việc tối ưu video streaming và tương tác realtime. Kiến trúc được thiết kế theo hướng module hóa, tận dụng sức mạnh của Flutter và Firebase, tạo nền tảng vững chắc cho việc phát triển. Ứng dụng đạt được trải nghiệm người dùng mượt mà với giao diện thân thiện, tốc độ phản hồi nhanh và khả năng hoạt động ổn định trên nhiều nền tảng khác nhau.
2.	Hạn chế
Mặc dù đạt được các mục tiêu cơ bản, ứng dụng vẫn còn một số hạn chế cần được cải thiện. Hệ thống chưa có thuật toán đề xuất nội dung thông minh, dẫn đến trải nghiệm feed chưa được cá nhân hóa tối ưu. Tính năng cache cho video còn chưa hoàn thiện, có thể gây tốn băng thông khi xem lại nội dung. Ngoài ra, hệ thống thông báo đôi khi còn độ trễ và chưa có tính năng phân loại thông báo theo mức độ ưu tiên.
3.	Hướng khắc phục
Để khắc phục các hạn chế hiện tại, dự án cần tập trung vào việc cải thiện thuật toán đề xuất nội dung bằng cách tích hợp machine learning. Hệ thống cache cần được nâng cấp với cơ chế quản lý thông minh hơn, tự động xóa cache không cần thiết và ưu tiên nội dung người dùng thường xuyên truy cập. Đối với hệ thống thông báo, cần tối ưu hóa websocket connection và triển khai hệ thống phân loại thông báo dựa trên mức độ tương tác của người dùng.”
4.	Hướng mở rộng
Trong tương lai, dự án có thể mở rộng theo nhiều hướng đầy tiềm năng. Việc tích hợp công nghệ AR/VR cho phép người dùng tạo nội dung tương tác hấp dẫn hơn. Phát triển tính năng live streaming với độ trễ thấp sẽ tăng tính tương tác trực tiếp. Xây dựng marketplace tích hợp cho phép người dùng mua bán trực tiếp trên nền tảng. Đồng thời, việc phát triển API cho bên thứ ba sẽ tạo ra một hệ sinh thái mở, thu hút nhiều nhà phát triển tham gia phát triển các tính năng bổ sung cho nền tảng. 



TÀI LIỆU THAM KHẢO

[1] 	Datareportal, “Digital 2023: Global Digital Overview,” 2023. [Online]. Available: ttps://datareportal.com/reports/digital-2023-global-digital-overview.
[2] 	Statista, “Mobile App Usage - Statistics & Facts,” [Online]. Available: https://www.statista.com/topics/1002/mobile-app-usage/.
[3] 	I. M. e. al, “Assessing the Impact of Service Workers on the Energy Efficiency of Progressive Web Apps,” [Online]. Available: https://ieeexplore.ieee.org/document/8816772.
[4] 	S. Overflow, “Developer Survey 2023,” [Online]. Available: https://insights.stackoverflow.com/survey/2023.
[5] 	A. Annie, “The State of Mobile 2023,” [Online]. Available: https://www.data.ai/en/go/state-of-mobile-2023/.
[6] 	https://www.data.ai/en/go/state-of-mobile-2023/, “Top Strategic Technology Trends for 2023,” [Online]. Available: https://www.gartner.com/en/information-technology/insights/top-technology-trends .
[7] 	R. Sharma, “Flutter Project Structure: Feature-first or Layer-first,” [Online]. Available: https://medium.com/flutter-community/flutter-project-structure-feature-first-or-layer-first-d61cb1d2c9cf.
[8] 	F. Angelini, “Flutter Clean Architecture,” 2023. [Online]. Available: https://github.com/felangel/bloc/tree/master/examples/flutter_clean_architecture.
[9] 	A. Biessek, “Flutter Architectural Patterns,” [Online]. Available: https://www.packtpub.com/product/flutter-architectural-patterns/9781801070317.
[10] 	R. Rousselet, “Riverpod Documentation,” 2023. [Online]. Available: https://riverpod.dev/.
[11] 	A. Bizzotto, “Flutter Riverpod 2.0: The Ultimate Guide,” 2022. [Online]. Available: https://codewithandrea.com/articles/flutter-state-management-riverpod/.
[12] 	F. –. Introduction, “GeeksforGeeks,” [Online]. Available: https://www.geeksforgeeks.org/firebase-introduction/.
[13] 	Firebase, “Google's Mobile and Web App Development Platform,” [Online]. Available: Firebase, https://firebase.google.com/, truy cập ngày 06/09/2024.
[14] 	F. P. a. C. W. Y. S. a. S. U. Firebase, “OSDB,” [Online]. Available: https://osdb.io/firebase-pros-and-cons-when-you-should-and-shouldnt-use-firebase-osdb.
[15] 	G. LLC, “ Introduction to Flutter,” Google LLC, 2023. [Online]. Available: https://docs.flutter.dev/get-started/introduction.
[16] 	Nielsen Company, “Nielsen Social Media Report 2022,” New York, 2022.
[17] 	A. Annie, “State of Mobile Report 2023,” App Annie Inc., San Francisco.
[18] 	Gartner, “IT Market Analysis: Social Media Platforms,” artner Researc, 2023.
[19] 	I. Security, “Cost of a Data Breach Report 2023,” IBM Corporation, Armonk, 2023.
[20] 	P. R. Center, “Digital Privacy Survey 2022,” Pew Research Center, Washington.


  


