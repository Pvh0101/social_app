import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../core/utils/log_utils.dart';
import '../models/user_model.dart';

/// `getUserInfoByIdProvider` l√† m·ªôt `FutureProvider.family`
///
/// Provider n√†y ch·ªãu tr√°ch nhi·ªám l·∫•y th√¥ng tin c·ªßa **m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ**
/// t·ª´ Firestore d·ª±a tr√™n `userId` ƒë∆∞·ª£c truy·ªÅn v√†o.
///
/// - **ƒê·∫ßu v√†o**: `String userId` ‚Äì UID c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y th√¥ng tin.
/// - **ƒê·∫ßu ra**: `Future<UserModel>` ‚Äì th√¥ng tin c·ªßa ng∆∞·ªùi d√πng t∆∞∆°ng ·ª©ng.
///
/// üîπ **C√°ch s·ª≠ d·ª•ng trong UI**:
/// ```dart
/// final userInfo = ref.watch(getUserInfoByIdProvider('someUserId'));
///
/// userInfo.when(
///   data: (user) => Text("T√™n ng∆∞·ªùi d√πng: ${user.displayName}"),
///   loading: () => CircularProgressIndicator(),
///   error: (error, stackTrace) => Text("L·ªói: $error"),
/// );
/// ```
///
/// üîπ **L∆∞u √Ω**:
/// - `userId` ph·∫£i t·ªìn t·∫°i trong Firestore, n·∫øu kh√¥ng s·∫Ω g√¢y l·ªói.
/// - Kh√¥ng t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi d·ªØ li·ªáu thay ƒë·ªïi (kh√¥ng ph·∫£i stream).
///
/// üöÄ **S·ª≠ d·ª•ng khi c·∫ßn hi·ªÉn th·ªã th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ m·ªôt l·∫ßn.**
final getUserInfoByIdProvider =
    FutureProvider.autoDispose.family<UserModel, String>((ref, userId) {
  logDebug(LogService.AUTH,
      '[USER_INFO_ID] L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID: $userId');

  return FirebaseFirestore.instance
      .collection('users')
      .doc(userId)
      .get()
      .then((userData) {
    if (!userData.exists) {
      logError(LogService.AUTH,
          '[USER_INFO_ID] Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng cho ID: $userId');
      throw Exception('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }

    logInfo(LogService.AUTH,
        '[USER_INFO_ID] ƒê√£ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng: $userId');
    return UserModel.fromMap(userData.data()!);
  }).catchError((error) {
    logError(LogService.AUTH,
        '[USER_INFO_ID] L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID: $error');
    throw error;
  });
});
