import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../core/utils/log_utils.dart';

import '../models/user_model.dart';

/// `getUserInfoAsStreamProvider` l√† m·ªôt `StreamProvider`
///
/// Provider n√†y l·∫Øng nghe **th√¥ng tin c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i** trong Firestore
/// theo th·ªùi gian th·ª±c, d·ª±a v√†o `uid` c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p.
///
/// - **ƒê·∫ßu v√†o**: Kh√¥ng c√≥ (t·ª± ƒë·ªông l·∫•y `uid` c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i).
/// - **ƒê·∫ßu ra**: `Stream<UserModel>` ‚Äì th√¥ng tin c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i.
///
/// üîπ **C√°ch s·ª≠ d·ª•ng trong UI**:
/// ```dart
/// final userStream = ref.watch(getUserInfoAsStreamProvider);
///
/// userStream.when(
///   data: (user) => Text("Xin ch√†o, ${user.displayName}"),
///   loading: () => CircularProgressIndicator(),
///   error: (error, stackTrace) => Text("L·ªói: $error"),
/// );
/// ```
///
/// üîπ **C∆° ch·∫ø ho·∫°t ƒë·ªông**:
/// - L·∫Øng nghe Firestore collection `users`, l·ªçc theo `uid` c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i.
/// - Khi c√≥ thay ƒë·ªïi, d·ªØ li·ªáu m·ªõi s·∫Ω ƒë∆∞·ª£c √°nh x·∫° (`map()`) th√†nh m·ªôt ƒë·ªëi t∆∞·ª£ng `UserModel`.
///
/// üîπ **L∆∞u √Ω**:
/// - Ng∆∞·ªùi d√πng ph·∫£i ƒëƒÉng nh·∫≠p (`FirebaseAuth.instance.currentUser` kh√¥ng ƒë∆∞·ª£c null).
/// - N·∫øu `uid` kh√¥ng t·ªìn t·∫°i trong Firestore, c√≥ th·ªÉ g√¢y l·ªói khi truy c·∫≠p `docs.first`.
final getUserInfoAsStreamProvider =
    StreamProvider.autoDispose<UserModel>((ref) {
  final uid = FirebaseAuth.instance.currentUser?.uid;

  if (uid == null) {
    logError(LogService.AUTH,
        '[USER_STREAM] Kh√¥ng th·ªÉ t·∫°o stream th√¥ng tin ng∆∞·ªùi d√πng: currentUser l√† null');
    throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
  }

  logDebug(LogService.AUTH,
      '[USER_STREAM] Kh·ªüi t·∫°o stream theo d√µi th√¥ng tin ng∆∞·ªùi d√πng: $uid');

  ref.onDispose(() {
    logDebug(LogService.AUTH,
        '[USER_STREAM] H·ªßy stream theo d√µi th√¥ng tin ng∆∞·ªùi d√πng: $uid');
  });

  return FirebaseFirestore.instance
      .collection('users')
      .where('uid', isEqualTo: uid)
      .limit(1)
      .snapshots()
      .map((snapshot) {
    if (snapshot.docs.isEmpty) {
      logError(LogService.AUTH,
          '[USER_STREAM] Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng trong stream: $uid');
      throw Exception('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }

    logDebug(LogService.AUTH,
        '[USER_STREAM] Nh·∫≠n c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng t·ª´ stream: $uid');
    final userData = snapshot.docs.first;
    return UserModel.fromMap(userData.data());
  });
});
