import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/user_model.dart';
import '../../../core/utils/log_utils.dart';

/// `getUserInfoProvider` l√† m·ªôt `FutureProvider`
///
/// Provider n√†y ch·ªãu tr√°ch nhi·ªám l·∫•y th√¥ng tin c·ªßa **ng∆∞·ªùi d√πng hi·ªán t·∫°i**
/// t·ª´ Firestore d·ª±a tr√™n `uid` c·ªßa h·ªç.
///
/// - **ƒê·∫ßu v√†o**: Kh√¥ng c√≥.
/// - **ƒê·∫ßu ra**: Tr·∫£ v·ªÅ m·ªôt `Future<UserModel>`, ch·ª©a th√¥ng tin c·ªßa ng∆∞·ªùi d√πng.
///
/// üîπ **C√°ch s·ª≠ d·ª•ng trong UI**:
/// ```dart
/// final userInfo = ref.watch(getUserInfoProvider);
///
/// userInfo.when(
///   data: (user) => Text("Xin ch√†o, ${user.displayName}"),
///   loading: () => CircularProgressIndicator(),
///   error: (error, stackTrace) => Text("L·ªói: $error"),
/// );
/// ```
///
/// üîπ **L∆∞u √Ω**:
/// - N·∫øu `FirebaseAuth.instance.currentUser` l√† `null`, h√†m s·∫Ω g·∫∑p l·ªói.
/// - ƒê·ªÉ tr√°nh l·ªói, n√™n ƒë·∫£m b·∫£o ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi g·ªçi provider n√†y.
final getUserInfoProvider = FutureProvider.autoDispose<UserModel>((ref) {
  final uid = FirebaseAuth.instance.currentUser?.uid;
  if (uid == null) {
    logError(LogService.AUTH,
        '[USER_INFO] Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: currentUser l√† null');
    throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
  }

  logDebug(
      LogService.AUTH, '[USER_INFO] L·∫•y th√¥ng tin ng∆∞·ªùi d√πng cho UID: $uid');

  return FirebaseFirestore.instance
      .collection('users')
      .doc(uid)
      .get()
      .then((userData) {
    if (!userData.exists) {
      logError(LogService.AUTH,
          '[USER_INFO] Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng cho UID: $uid');
      throw Exception('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }

    logInfo(LogService.AUTH,
        '[USER_INFO] ƒê√£ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng: $uid');
    return UserModel.fromMap(userData.data()!);
  }).catchError((error) {
    logError(LogService.AUTH,
        '[USER_INFO] L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: $error');
    throw error;
  });
});
