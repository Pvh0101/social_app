import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../core/utils/log_utils.dart';
import '../models/user_model.dart';

/// `getUserInfoAsStreamByIdProvider` l√† m·ªôt `StreamProvider.family`
///
/// Provider n√†y **l·∫Øng nghe th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥** theo th·ªùi gian th·ª±c,
/// d·ª±a tr√™n `userId` ƒë∆∞·ª£c truy·ªÅn v√†o.
///
/// - **ƒê·∫ßu v√†o**: `String userId` ‚Äì UID c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y th√¥ng tin.
/// - **ƒê·∫ßu ra**: `Stream<UserModel>` ‚Äì th√¥ng tin c·ªßa ng∆∞·ªùi d√πng t∆∞∆°ng ·ª©ng.
///
/// üîπ **C√°ch s·ª≠ d·ª•ng trong UI**:
/// ```dart
/// final userStream = ref.watch(getUserInfoAsStreamByIdProvider('someUserId'));
///
/// userStream.when(
///   data: (user) => Text("T√™n ng∆∞·ªùi d√πng: ${user.displayName}"),
///   loading: () => CircularProgressIndicator(),
///   error: (error, stackTrace) => Text("L·ªói: $error"),
/// );
/// ```
///
/// üîπ **C∆° ch·∫ø ho·∫°t ƒë·ªông**:
/// - L·∫Øng nghe Firestore collection `users`, t√¨m ki·∫øm user theo `uid` truy·ªÅn v√†o.
/// - Khi c√≥ thay ƒë·ªïi, d·ªØ li·ªáu m·ªõi s·∫Ω ƒë∆∞·ª£c √°nh x·∫° (`map()`) th√†nh m·ªôt ƒë·ªëi t∆∞·ª£ng `UserModel`.
///
/// üîπ **L∆∞u √Ω**:
/// - `userId` ph·∫£i t·ªìn t·∫°i trong Firestore, n·∫øu kh√¥ng s·∫Ω g√¢y l·ªói khi truy c·∫≠p `docs.first`.
/// - D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông khi c√≥ thay ƒë·ªïi trong Firestore.
///
/// üöÄ **S·ª≠ d·ª•ng khi c·∫ßn hi·ªÉn th·ªã th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥ trong th·ªùi gian th·ª±c.**
final getUserInfoAsStreamByIdProvider =
    StreamProvider.autoDispose.family<UserModel, String>((ref, String userId) {
  if (userId.isEmpty) {
    logError(LogService.AUTH,
        '[USER_STREAM_ID] Kh√¥ng th·ªÉ t·∫°o stream th√¥ng tin ng∆∞·ªùi d√πng: userId tr·ªëng');
    throw Exception('userId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
  }

  logDebug(LogService.AUTH,
      '[USER_STREAM_ID] Kh·ªüi t·∫°o stream theo d√µi th√¥ng tin ng∆∞·ªùi d√πng theo ID: $userId');

  ref.onDispose(() {
    logDebug(LogService.AUTH,
        '[USER_STREAM_ID] H·ªßy stream theo d√µi th√¥ng tin ng∆∞·ªùi d√πng theo ID: $userId');
  });

  return FirebaseFirestore.instance
      .collection('users')
      .where('uid', isEqualTo: userId)
      .limit(1)
      .snapshots()
      .map((snapshot) {
    if (snapshot.docs.isEmpty) {
      logError(LogService.AUTH,
          '[USER_STREAM_ID] Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng trong stream theo ID: $userId');
      throw Exception('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }

    logDebug(LogService.AUTH,
        '[USER_STREAM_ID] Nh·∫≠n c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng t·ª´ stream theo ID: $userId');
    final userData = snapshot.docs.first;
    return UserModel.fromMap(userData.data());
  });
});
