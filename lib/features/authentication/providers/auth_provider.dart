import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../repository/auth_repository.dart';
import '../../../core/services/fcm_service.dart';
import '../../../core/utils/log_utils.dart';

/// Provider cho AuthRepository
///
/// Provider n√†y t·∫°o v√† cung c·∫•p m·ªôt instance c·ªßa [AuthRepository] v·ªõi c√°c
/// dependencies c·∫ßn thi·∫øt (Firebase Auth, Firestore, FCM Service).
///
/// üîπ **C√°ch s·ª≠ d·ª•ng**:
/// ```dart
/// final authRepo = ref.watch(authRepositoryProvider);
/// await authRepo.signIn(email: email, password: password);
/// ```
///
/// üîπ **L∆∞u √Ω**:
/// - ƒê√¢y l√† provider ch√≠nh cho c√°c thao t√°c x√°c th·ª±c.
/// - N√™n s·ª≠ d·ª•ng provider n√†y thay v√¨ t·∫°o instance AuthRepository tr·ª±c ti·∫øp.
final authRepositoryProvider = Provider<AuthRepository>((ref) {
  logDebug(LogService.AUTH, '[INIT] Kh·ªüi t·∫°o AuthRepository');
  final fcmService = ref.watch(fcmServiceProvider);
  return AuthRepository(
    auth: FirebaseAuth.instance,
    firestore: FirebaseFirestore.instance,
    fcmService: fcmService,
  );
});

/// Provider cho AuthRepository (legacy)
///
/// Provider n√†y ƒë∆∞·ª£c gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi m√£ ngu·ªìn c≈©.
/// N√≥ ch·ªâ ƒë∆°n gi·∫£n l√† chuy·ªÉn ti·∫øp ƒë·∫øn [authRepositoryProvider].
///
/// üîπ **C√°ch s·ª≠ d·ª•ng**:
/// ```dart
/// final authRepo = ref.watch(authProvider);
/// await authRepo.signIn(email: email, password: password);
/// ```
///
/// üîπ **L∆∞u √Ω**:
/// - N√™n s·ª≠ d·ª•ng [authRepositoryProvider] cho code m·ªõi.
final authProvider = Provider((ref) {
  logDebug(
      LogService.AUTH, '[ACCESS] Truy c·∫≠p AuthRepository qua authProvider');
  return ref.watch(authRepositoryProvider);
});
